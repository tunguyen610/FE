@{ ViewData["Title"] = "Product"; Layout = "_NovaticAdmin"; }

<div class="page-header card">
	<div class="col">
		<div class="page-header-title">
			<i class="fa fa-server"></i>
			<div class="d-inline">
				<h3 class="tableTitle">Product</h3>
			</div>
		</div>

		<a href="#" id="btnAddItem" onclick="editItem(0);" class="btn btn-brand btn-elevate btn-icon-sm">
			<i class="fa fa-plus"></i>
			<span class="hideOnMobile">New Record</span>
		</a>
	</div>
</div>

<div class="pcoded-inner-content">
	<div class="main-body">
		<div class="page-wrapper">
			<!-- Page-body start -->
			<div class="page-body">
				<div class="card">
					<div class="card-block novaticContainer">
						<div class="dt-responsive table-responsive">
							<table id="tableData" class="table table-hover">
								<thead>
									<tr>
										<th>Index</th>
										<th>Cửa hàng</th>
										<th>Loại sản phẩm</th>
										<th>Trạng thái</th>
										<th>Danh mục</th>
										<th>Hãng sản xuất</th>
										<th>Hãng sản xuất</th>
										<th>Tên</th>
										<th>Ảnh</th>
										<th>Giá</th>
										<th>Ngày tạo</th>

										<th>Detail</th>
										<th>Delete</th>
									</tr>
								</thead>
								<tbody></tbody>
								<tfoot>
									<tr>
										<th>Index</th>
										<th>Cửa hàng</th>
										<th>Loại sản phẩm</th>
										<th>Trạng thái</th>
										<th>Danh mục</th>
										<th>Hãng sản xuất</th>
										<th>Hãng sản xuất</th>
										<th>Tên</th>
										<th>Ảnh</th>
										<th>Giá</th>
										<th>Ngày tạo</th>

										<th></th>
										<th></th>
									</tr>
								</tfoot>
							</table>

							<div class="modal fade" id="modal-id">
								<div class="modal-dialog modal-lg modal-xl">
									<div class="modal-content">
										<div class="modal-header bg-gradient-info">
											<button type="button" class="close" data-dismiss="modal" aria-hidden="true">
												&times;
											</button>
											<h4 class="modal-title"><i class="fa fa-edit"></i> Detail item</h4>
										</div>
										<div class="modal-body">
											<form action="" method="POST" onsubmit="updateItem(updatingItemId); return false;" role="form">
												<!-- <div class="form-group">
                                                                    <label for="">Apply type Id</label>
                                                                    <input type="text" class="form-control"
                                                                        id="productId" required readonly
                                                                        placeholder="">
                                                                </div>


                                                                <div class='form-group'>
                                                                    <label for=''>Apply type name</label>
                                                                    <input type='text' class='form-control'
                                                                        id='productName' required
                                                                        placeholder=''>
                                                                </div>


                                                                <div class='form-group'>
                                                                    <label for=''>Description</label>
                                                                    <input type='text' class='form-control'
                                                                        id='productDescription'
                                                                        placeholder=''>
                                                                </div>


                                                                <div class='form-group'>
                                                                    <label for=''>CreatedTime</label>
                                                                    <input type='text'
                                                                        class='form-control datetimepicker'
                                                                        id='productCreatedTime'
                                                                        placeholder=''>
                                                                </div>


                                                                <div class='form-group' style="">
                                                                    <label for=''>Active</label>
                                                                    <input type='text' class='form-control'
                                                                        id='productActive' readonly
                                                                        placeholder=''>
                                                                </div>
                                                                -->
												<div class="form-group col-sm-3">
													<label for="">Id</label><span class="required">*</span>
													<input type="number" class="form-control input-id" value="0" id="productId" required readonly placeholder="" />
												</div>
												<div class="form-group col-sm-3">
													<label for="">GUID</label>
													<input type="text" class="form-control input-guId" id="productGuId" placeholder="" />
												</div>

												<div class="form-group col-sm-3 selectContainer">
													<label class="">Cửa hàng</label><span class="required">*</span>
													<div class="col-sm-12">
														<select name="select" required id="productShopId" class="form-control fill dataSelect input-ShopId" style=" border: 1px solid #e9ecef; "> </select>
													</div>
												</div>
												<script>
													var shopData = [];
													function loadDataSelectShop() {
													    return $.ajax({
													        url: '@{
													    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
													}' + 'Shop/api/list',
													        type: 'GET',
													        async: 'true',
													        contentType: 'application/json',
													        success: function(responseData) {
													            console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded Shop');
													            // debugger;
													            var data = responseData.data;
													            shopData = data;
													            data.forEach(function(item, index) {
													                var data = {
													                    id: item.id,
													                    text: item.name
													                };
													                var newOption = new Option(data.text, data.id, false, false);
													                $('#productShopId').append(newOption).trigger('change');
													            });
													        },
													        error: function(e) {
													            //console.log(e.message);
													        }
													    });
													}
													$(document).ready(function() {
													    //loadDataSelectShop();
													});
												</script>

												<div class="form-group col-sm-3 selectContainer">
													<label class="">Loại sản phẩm</label><span class="required">*</span>
													<div class="col-sm-12">
														<select name="select" required id="productProductTypeId" class="form-control fill dataSelect input-productTypeId" style=" border: 1px solid #e9ecef; "> </select>
													</div>
												</div>
												<script>
													var productTypeData = [];
													function loadDataSelectProductType() {
													    return $.ajax({
													        url: '@{
													    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
													}' + 'productType/api/list',
													        type: 'GET',
													        async: 'true',
													        contentType: 'application/json',
													        success: function(responseData) {
													            console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded productType');
													            // debugger;
													            var data = responseData.data;
													            productTypeData = data;
													            data.forEach(function(item, index) {
													                var data = {
													                    id: item.id,
													                    text: item.name
													                };
													                var newOption = new Option(data.text, data.id, false, false);
													                $('#productProductTypeId').append(newOption).trigger('change');
													            });
													        },
													        error: function(e) {
													            //console.log(e.message);
													        }
													    });
													}
													$(document).ready(function() {
													    //loadDataSelectProductType();
													});
												</script>
												<div class="form-group col-sm-3 selectContainer">
													<label class="">Trạng thái</label><span class="required">*</span>
													<div class="col-sm-12">
														<select name="select" required id="productProductStatusId" class="form-control fill dataSelect input-productStatusId" style=" border: 1px solid #e9ecef; "> </select>
													</div>
												</div>
												<script>
													var productStatusData = [];
													function loadDataSelectProductStatus() {
													    return $.ajax({
													        url: '@{
													    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
													}' + 'productStatus/api/list',
													        type: 'GET',
													        async: 'true',
													        contentType: 'application/json',
													        success: function(responseData) {
													            console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded productStatus');
													            // debugger;
													            var data = responseData.data;
													            productStatusData = data;
													            data.forEach(function(item, index) {
													                var data = {
													                    id: item.id,
													                    text: item.name
													                };
													                var newOption = new Option(data.text, data.id, false, false);
													                $('#productProductStatusId').append(newOption).trigger('change');
													            });
													        },
													        error: function(e) {
													            //console.log(e.message);
													        }
													    });
													}
													$(document).ready(function() {
													    //loadDataSelectProductStatus();
													});
												</script>
												<div class="form-group col-sm-3 selectContainer">
													<label class="">Danh mục</label><span class="required">*</span>
													<div class="col-sm-12">
														<select name="select" required id="productProductCategoryId" class="form-control fill dataSelect input-productCategoryId" style=" border: 1px solid #e9ecef; "> </select>
													</div>
												</div>
												<script>
													var productCategoryData = [];
													function loadDataSelectProductCategory() {
													    return $.ajax({
													        url: '@{
													    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
													}' + 'productCategory/api/list',
													        type: 'GET',
													        async: 'true',
													        contentType: 'application/json',
													        success: function(responseData) {
													            console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded productCategory');
													            // debugger;
													            var data = responseData.data;
													            productCategoryData = data;
													            data.forEach(function(item, index) {
													                var data = {
													                    id: item.id,
													                    text: item.name
													                };
													                var newOption = new Option(data.text, data.id, false, false);
													                $('#productProductCategoryId').append(newOption).trigger('change');
													            });
													        },
													        error: function(e) {
													            //console.log(e.message);
													        }
													    });
													}
													$(document).ready(function() {
													    //loadDataSelectProductCategory();
													});
												</script>

												<div class="form-group col-sm-3 selectContainer">
													<label class="">Hãng sản xuất</label><span class="required">*</span>
													<div class="col-sm-12">
														<select name="select" required id="productProductBrandId" class="form-control fill dataSelect input-productBrandId" style=" border: 1px solid #e9ecef; "> </select>
													</div>
												</div>
												<script>
													var productBrandData = [];
													function loadDataSelectProductBrand() {
													    return $.ajax({
													        url: '@{
													    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
													}' + 'productBrand/api/list',
													        type: 'GET',
													        async: 'true',
													        contentType: 'application/json',
													        success: function(responseData) {
													            console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded productBrand');
													            // debugger;
													            var data = responseData.data;
													            productBrandData = data;
													            data.forEach(function(item, index) {
													                var data = {
													                    id: item.id,
													                    text: item.name
													                };
													                var newOption = new Option(data.text, data.id, false, false);
													                $('#productProductBrandId').append(newOption).trigger('change');
													            });
													        },
													        error: function(e) {
													            //console.log(e.message);
													        }
													    });
													}
													$(document).ready(function() {
													    //loadDataSelectProductBrand();
													});
												</script>

												<div class="form-group col-sm-3 selectContainer">
													<label class="">Loại discount</label><span class="required">*</span>
													<div class="col-sm-12">
														<select name="select" required id="productProductDiscountTypeId" class="form-control fill dataSelect input-productDiscountTypeId" style=" border: 1px solid #e9ecef; "> </select>
													</div>
												</div>
												<script>
													var productDiscountTypeData = [];
													function loadDataSelectProductDiscountType() {
													    return $.ajax({
													        url: '@{
													    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
													}' + 'productDiscountType/api/list',
													        type: 'GET',
													        async: 'true',
													        contentType: 'application/json',
													        success: function(responseData) {
													            console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded productDiscountType');
													            // debugger;
													            var data = responseData.data;
													            productDiscountTypeData = data;
													            data.forEach(function(item, index) {
													                var data = {
													                    id: item.id,
													                    text: item.name
													                };
													                var newOption = new Option(data.text, data.id, false, false);
													                $('#productProductDiscountTypeId').append(newOption).trigger('change');
													            });
													        },
													        error: function(e) {
													            //console.log(e.message);
													        }
													    });
													}
													$(document).ready(function() {
													    //loadDataSelectProductDiscountType();
													});
												</script>
												<div class="form-group col-sm-3">
													<label for="">Tên</label><span class="required">*</span>
													<input type="text" class="form-control input-name" id="productName" required placeholder="" />
												</div>
												<div class="form-group col-sm-3">
													<label for="">Nguồn gốc xuất xứ</label>
													<textarea class="form-control input-origin" rows="2" id="productOrigin"></textarea>
												</div>
												<div class="form-group col-sm-3">
													<label for="">Mô tả</label>
													<textarea class="form-control input-description" rows="2" id="productDescription"></textarea>
												</div>
												<div class="form-group col-sm-3" style="display:none ">
													<label for="">Active</label><span class="required">*</span>
													<input type="number" class="form-control input-active" value="0" id="productActive" required placeholder="" />
												</div>
												<div class="form-group col-sm-3">
													<label for="">Giá</label><span class="required">*</span>
													<input type="number" class="form-control input-price" value="0" id="productPrice" required placeholder="" />
												</div>
												<div class="form-group col-sm-12">
													<label for="">Nội dung</label>
													<textarea class="form-control input-info" rows="2" id="productInfo"></textarea>
												</div>
												<script>
													var productInfoEditor;
													ClassicEditor
													    .create(document.querySelector('#productInfo'))
													    .then(editor => {
													        // console.log( 'Editor was initialized', editor );
													        productInfoEditor = editor;
													        editor.model.document.on('change:data', (evt, data) => {
													            // debugger;
													            // console.log('Updated:'+ data );
													            $('#productInfo').val(productInfoEditor.getData());
													        });
													    })
													    .catch(err => {
													        console.error(err.stack);
													    });
												</script>

												
												<div class="form-group col-sm-3">
													<label for="">Ảnh</label>
													<input type="text" class="form-control input-photo" id="productPhoto" placeholder="" />
												</div>

												<div class="form-group col-sm-3">
													<label for="">Ngày tạo </label><span class="required">*</span>
													<div class="input-group date datetimepicker input-createdTime" id="productCreatedTimeDiv">
														<input type="text" id="productCreatedTime" required class="form-control" required />
														<span class="input-group-addon">
															<span class="glyphicon glyphicon-calendar"></span>
														</span>
													</div>
												</div>

												<input style="display:none" id="hiddenSubmit" type="submit" class="btn btn-default" value="Save changes" />
											</form>
										</div>
										<div class="modal-footer">
											<button type="button" class="btn btn-default" data-dismiss="modal">
												Close
											</button>
											<button type="button" class="btn btn-primary" id="btnUpdateItem" onclick="document.getElementById('hiddenSubmit').click();">
												Save changes
											</button>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	var hiddenItem = ["id", "guId", "origin", "description", "active", "info"];
	var showItem = ["productTypeId", "shopId", "productStatusId", "productCategoryId", "productBrandId", "productDiscountTypeId", "name", "photo", "price", "createdTime"];
	var dataSource = [];
	var updatingItemId = 0;
	var tableUpdating = 0;
	var table;

	$(document).ready(function() {
	    // Load data
	    //loadData();
	    //setTimeout(function(){loadData();}, 460);

	    $.when(loadDataSelectShop(), loadDataSelectProductType(), loadDataSelectProductStatus(), loadDataSelectProductCategory(), loadDataSelectProductBrand(), loadDataSelectProductDiscountType()).done(function(resultDataSelectShopId, resultDataSelectProductTypeproductProductTypeId, resultDataSelectProductStatusproductProductStatusId, resultDataSelectProductCategoryproductProductCategoryId, resultDataSelectProductBrandproductProductBrandId, resultDataSelectProductDiscountTypeproductProductDiscountTypeId) {
	        loadData();
	    });

	    // includeLibrary();

	    // Datetime picker
	    $('.datetimepicker').datetimepicker({
	        format: 'YYYY-MM-DD HH:mm:ss'
	    });

	    $('.dataSelect').select2();

	    $(".datetimepicker").on('dp.change', function(e) {
	        // console.log(this.value);
	        this.value = moment(this.value).format("YYYY-MM-DD HH:mm:ss");
	        // console.log(this.value);
	    })

	});


	function loadData() {
	    $.ajax({
	        url: '@{
	    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
	}' + "product/api/listAdmin",
	        type: "GET",
	        contentType: "application/json",
	        success: function(responseData) {
	            // debugger;
	            var data = responseData.data;
	            dataSource = data;




	            data.forEach(function(item, index) {
	                // console.log(item, index);
	                var rowContent = "";
	                rowContent += "<td style='text-align: center;'>" + (index + 1) + "</td>";
	                for (var key in item) {

	                    if (item.hasOwnProperty(key)) {
	                         /*console.log(key + " -> " + item[key]);*/
	                        if (showItem.includes(key)) {
	                            if (key != "photo") {
	                                rowContent += "<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>";
	                            }
	                            else {
	                                rowContent += "<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'><img src='" + item[key] + "' style='height:80px;' /></td>";
	                            }
	                        }
	                    }
	                }
	                rowContent += "<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>";
	                rowContent += "<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>";

	                var newRow = "<tr id='row" + item.id + "' >" + rowContent + "</tr>";
	                $(newRow).appendTo($("#tableData tbody"));

	                // $("#tableData #dummyRow").after("<tr id='row"+item.id+"' >" + rowContent + "</tr>");
	            });

	            //Init datatable
	            if (tableUpdating === 0) {
	                initTable();
	            }

	            //update data with foreign key
	            updateTable();
	        },
	        error: function(e) {
	            //console.log(e.message);
	            initTable();
	        }
	    });
	}

	function initTable() {
	    table = $('#tableData').DataTable({
	        aLengthMenu: [
	            [-1, 10, 25, 50, 100, 200],
	            ['Tất cả', 10, 25, 50, 100, 200]
	        ],
	        'order': [
	            [1, 'desc']
	        ]
	    });



	    table.on('order.dt search.dt', function() {
	        table.column(0, {
	            search: 'applied',
	            order: 'applied'
	        }).nodes().each(function(cell, i) {
	            cell.innerHTML = i + 1;
	        });
	    }).draw();

	    $('#tableData tfoot th:not(:last-child):not(:nth-last-child(2))').each(function() {
	        var title = $(this).text();
	        $(this).html("<input type='text' class='tableFooterFilter' placeholder=' ' />");
	    });

	    table.columns().every(function() {
	        var that = this;

	        $('input', this.footer()).on('keyup change', function() {
	            if (that.search() !== this.value) {
	                that
	                    .search(this.value)
	                    .draw();
	            }
	        });
	    });

	    setTimeout(function() {
	        table.page.len(10).draw();
	    }, 1000);

	}

	function editItem(id) {
	    updatingItemId = id;
	    $("#modal-id").modal('show');

	    let obj = getItemById(id);
	    $("#productId").val(id > 0 ? obj.id : "");
	    $("#productGuId").val(id > 0 ? obj.guId : "");
	    $("#productProductTypeId").val(id > 0 ? obj.productTypeId : "");
	    $("#productShopId").val(id > 0 ? obj.shopId : "");
	    $("#productProductStatusId").val(id > 0 ? obj.productStatusId : "");
	    $("#productProductCategoryId").val(id > 0 ? obj.productCategoryId : "");
	    $("#productProductBrandId").val(id > 0 ? obj.productBrandId : "");
	    $("#productProductDiscountTypeId").val(id > 0 ? obj.productDiscountTypeId : "");
	    $("#productName").val(id > 0 ? obj.name : "");
	    $("#productOrigin").val(id > 0 ? obj.origin : "");
	    $("#productDescription").val(id > 0 ? obj.description : "");
	    $("#productActive").val(id > 0 ? obj.active : "");
	    $("#productPhoto").val(id > 0 ? obj.photo : "");
	    $("#productPrice").val(id > 0 ? obj.price : "");
	    $("#productInfo").val(id > 0 ? obj.info : "");
	    $("#productCreatedTime").val(id > 0 ? obj.createdTime : "");
	    $('#productShopId').trigger('change');
	    $('#productProductTypeId').trigger('change');
	    $('#productProductStatusId').trigger('change');
	    $('#productProductCategoryId').trigger('change');
	    $('#productProductBrandId').trigger('change');
	    $('#productProductDiscountTypeId').trigger('change');
	    productInfoEditor.setData((id > 0 ? obj.info : ''));

	    // $("#productId").val(id > 0 ? obj.id : "");
	    // $("#productName").val(id > 0 ? obj.name : "");
	    // $("#productDescription").val(id > 0 ? obj.description : "");
	    // $("#productCreatedTime").val(id > 0 ? obj.createdTime : "");
	    // $("#productActive").val(id > 0 ? obj.active : "");

	    if (id == 0) {
	        $("#productActive").val(1);
	        $("#productCreatedTime").val(new Date().toISOString().replace(/T/, ' ').replace(/\..+/, ''));
	    }
	    else {
	        // correcting data
	        //$('#buyProvinceId').val(obj.provinceId.split(", ")).trigger('change');

	    }
	    formatNumber();
	}


	function updateItem(id) {
	    var actionName = (id == 0 ? "Create" : "Update");
	    let obj = getItemById(id);
	    let objName = id > 0 ? obj.name : " ";

	    validateInputNumber();

	    // "id": $("#productId").val(),
	    // "name": $("#productName").val(),
	    // "description": $("#productDescription").val(),
	    // "createdTime": $("#productCreatedTime").val(),
	    // "active": $("#productActive").val()
	    var updatingObj = {
	        "id": $("#productId").val(),
	        "guId": $("#productGuId").val(),
	        "shopId": $("#productShopId").val(),
	        "productTypeId": $("#productProductTypeId").val(),
	        "productStatusId": $("#productProductStatusId").val(),
	        "productCategoryId": $("#productProductCategoryId").val(),
	        "productBrandId": $("#productProductBrandId").val(),
	        "productDiscountTypeId": $("#productProductDiscountTypeId").val(),
	        "name": $("#productName").val(),
	        "origin": $("#productOrigin").val(),
	        "description": $("#productDescription").val(),
	        "active": $("#productActive").val(),
	        "photo": $("#productPhoto").val(),
	        "price": $("#productPrice").val(),
	        "info": $("#productInfo").val(),
	        "createdTime": datetimeFormat($("#productCreatedTime").val()),

	    };

	    // correcting data
	    //updatingObj.provinceId = updatingObj.provinceId.join(", ");


	    Swal.fire({
	        title: 'Are you sure?',
	        text: "Performing " + actionName + " item " + objName,
	        icon: 'info',
	        showCancelButton: true,
	        confirmButtonColor: '#3085d6',
	        cancelButtonColor: '#443',
	        confirmButtonText: 'Yes, confirm!'
	    }).then((result) => {
	        if (result.value) {
	            $("#modal-id").modal('hide');

	            //CALL AJAX TO UPDATE
	            if (id > 0) {
	                $.ajax({
	                    url: '@{
	    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
	}' + "product/api/update",
	                    type: "POST",
	                    contentType: "application/json",
	                    data: JSON.stringify(updatingObj),
	                    success: function(responseData) {
	                        // debugger;
	                        if (responseData.status == 200 && responseData.message === "SUCCESS") {
	                            Swal.fire(
	                                'Updated!',
	                                'Item ' + objName + ' has been successfully updated!',
	                                'success'
	                            );
	                            updateTable(id, updatingObj, "update");
	                            var updatedItemIndex = dataSource.findIndex(item => parseInt(item.id) === id);
	                            dataSource[updatedItemIndex] = updatingObj;
	                        }
	                    },
	                    error: function(e) {
	                        //console.log(e.message);
	                        Swal.fire(
	                            'Error!',
	                            'Couldn\'t update item, please check your data',
	                            'error'
	                        );
	                    }
	                });
	            };

	            //CALL AJAX TO CREATE
	            if (id == 0) {
	                updatingObj.id = 1;
	                delete updatingObj["id"]
	                updatingObj.active = 1;
	                updatingObj.createdTime = new Date();
	                console.log(updatingObj);
	                $.ajax({
	                    url: '@{
	    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
	}' + "product/api/add",
	                    type: "POST",
	                    contentType: "application/json",
	                    data: JSON.stringify(updatingObj),
	                    success: function(responseData) {
	                        // debugger;
	                        if (responseData.status == 201 && responseData.message === "CREATED") {
	                            Swal.fire(
	                                'Created!',
	                                'New item has been successfully created!',
	                                'success'
	                            );
	                            updatingObj = responseData.data;
	                            dataSource.push(updatingObj);
	                            updateTable(0, updatingObj, "add");
	                        }
	                    },
	                    error: function(e) {
	                        //console.log(e.message);
	                        Swal.fire(
	                            'Error!',
	                            'Couldn\'t create item, please check your data',
	                            'error'
	                        );
	                    }
	                });
	            }
	        }
	    })
	}

	function deleteItem(id) {
	    let obj = getItemById(id);
	    Swal.fire({
	        title: 'Are you sure?',
	        text: "You won't be able to revert this!",
	        icon: 'warning',
	        showCancelButton: true,
	        confirmButtonColor: '#d33',
	        cancelButtonColor: '#3085d6',
	        confirmButtonText: 'Yes, delete it!'
	    }).then((result) => {
	        if (result.value) {

	            //CALL AJAX TO DELETE
	            $.ajax({
	                url: '@{
	    @ViewBag.SystemConfigs["HOMEPAGE_URL"].Description
	}' + "product/api/delete",
	                type: "POST",
	                contentType: "application/json",
	                data: JSON.stringify({ "id": id }),
	                success: function(responseData) {
	                    // debugger;
	                    if (responseData.status == 200 && responseData.message === "SUCCESS") {
	                        Swal.fire(
	                            'Deleted!',
	                            'Item ' + obj.name + ' has been deleted.',
	                            'success'
	                        );
	                        updateTable(id, 0, "delete");
	                    }
	                },
	                error: function(e) {
	                    //console.log(e.message);
	                    Swal.fire(
	                        'Error!',
	                        'Item ' + obj.name + ' can\'t be deleted.',
	                        'error'
	                    );
	                }
	            });

	        }
	    })
	}

	function updateTable(id, obj, action) {
	    if (action === "delete") {
	        table.row("#row" + id).remove().draw();
	    }

	    if (action === "add") {
	        console.log("Added:" + obj);

	        //var addedItems = [obj];
	        var addedItems = obj;
	        var addedValues = [];


	        addedItems.forEach(function(item, index) {
	            // console.log(item, index);
	            var rowContent = "";
	            addedValues.push("<td style='text-align: center;'></td>");
	            for (var key in item) {
	                if (item.hasOwnProperty(key)) {
	                    // console.log(key + " -> " + item[key]);
	                    if (showItem.includes(key)) {
	                        if (key != "photo") {
	                            addedValues.push("<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>");
	                        }
	                        else {
	                            addedValues.push("<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'><img src='" + item[key] + "' style='height:80px;' /></td>");
	                        }
	                    }
	                }
	            }
	            addedValues.push("<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>");
	            addedValues.push("<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>");

	            table.row.add(addedValues).draw();
	        });
	        // location.reload();
	    }

	    if (action === "update") {
	        // alert(id);
	        $(".row" + id + "-column").each(function() {
	            var propertyName = $(this).attr("property");
	            console.log(propertyName);

	            for (var key in obj) {
	                if (key === propertyName && obj.hasOwnProperty(key)) {
	                    if (key === "photo") {
	                        $(this).children().attr("src", obj[key]);
	                    }
	                    else {
	                        this.innerText = obj[key];
	                    }
	                }
	            }

	        });
	    }

	    //Update columns with foreign key
	    // var NO_FKFKUpdateSelector = 'tr';
	    // if( !(typeof(id) === 'undefined')) {
	    //     NO_FKFKUpdateSelector = '#row'+id;
	    // }
	    // $('#tableData tbody '+NO_FKFKUpdateSelector+' td[property=NO_FKId]').each(function(){
	    //     // debugger;
	    //     var productId = parseInt($(this).attr('class').replace('row','').replace('-column',''));
	    //     var productObj = getItemById(productId);
	    //     var NO_FKId = parseInt(productObj.NO_FKId);
	    //     var NO_FKObj = NO_FKData.find(item => parseInt(item.id) === NO_FKId);
	    //     $(this).text(NO_FKObj.name);
	    //     // console.log('FK updated for Staff '+productId);
	    // });

	    try {
	        var productTypeFKUpdateSelector = 'tr';
	        if (!(typeof (id) === 'undefined')) {
	            // debugger;
	            productTypeFKUpdateSelector = '#row' + id;
	            var productTypeId = parseInt(obj.productTypeId);
	            var productTypeObj = productTypeData.find(item => parseInt(item.id) === productTypeId);
	            //create data
	            //$('#tableData tbody tr:first-child td:nth-child(0)').text(productTypeObj.name);

	            //update data
	            $('#tableData tbody ' + productTypeFKUpdateSelector + ' td[property=productTypeId]').text(productTypeObj.name);
	            //table.cell( this ).data(productTypeObj.name);
	        }
	        else {
	            //Page load
	            $('#tableData tbody ' + productTypeFKUpdateSelector + ' td[property=productTypeId]').each(function() {
	                // debugger;
	                var productId = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
	                var productObj = getItemById(productId);
	                var productTypeId = parseInt(productObj.productTypeId);
	                var productTypeObj = productTypeData.find(item => parseInt(item.id) === productTypeId);
	                //$(this).text(productTypeObj.name);
	                table.cell(this).data(productTypeObj.name);
	                // console.log('FK updated for Staff '+productId);
	            });
	        }
	    } catch (error) {

	    }
	    try {
	        var productStatusFKUpdateSelector = 'tr';
	        if (!(typeof (id) === 'undefined')) {
	            // debugger;
	            productStatusFKUpdateSelector = '#row' + id;
	            var productStatusId = parseInt(obj.productStatusId);
	            var productStatusObj = productStatusData.find(item => parseInt(item.id) === productStatusId);
	            //create data
	            //$('#tableData tbody tr:first-child td:nth-child(0)').text(productStatusObj.name);

	            //update data
	            $('#tableData tbody ' + productStatusFKUpdateSelector + ' td[property=productStatusId]').text(productStatusObj.name);
	            //table.cell( this ).data(productStatusObj.name);
	        }
	        else {
	            //Page load
	            $('#tableData tbody ' + productStatusFKUpdateSelector + ' td[property=productStatusId]').each(function() {
	                // debugger;
	                var productId = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
	                var productObj = getItemById(productId);
	                var productStatusId = parseInt(productObj.productStatusId);
	                var productStatusObj = productStatusData.find(item => parseInt(item.id) === productStatusId);
	                //$(this).text(productStatusObj.name);
	                table.cell(this).data(productStatusObj.name);
	                // console.log('FK updated for Staff '+productId);
	            });
	        }
	    } catch (error) {

	    }
	    try {
	        var productCategoryFKUpdateSelector = 'tr';
	        if (!(typeof (id) === 'undefined')) {
	            // debugger;
	            productCategoryFKUpdateSelector = '#row' + id;
	            var productCategoryId = parseInt(obj.productCategoryId);
	            var productCategoryObj = productCategoryData.find(item => parseInt(item.id) === productCategoryId);
	            //create data
	            //$('#tableData tbody tr:first-child td:nth-child(0)').text(productCategoryObj.name);

	            //update data
	            $('#tableData tbody ' + productCategoryFKUpdateSelector + ' td[property=productCategoryId]').text(productCategoryObj.name);
	            //table.cell( this ).data(productCategoryObj.name);
	        }
	        else {
	            //Page load
	            $('#tableData tbody ' + productCategoryFKUpdateSelector + ' td[property=productCategoryId]').each(function() {
	                // debugger;
	                var productId = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
	                var productObj = getItemById(productId);
	                var productCategoryId = parseInt(productObj.productCategoryId);
	                var productCategoryObj = productCategoryData.find(item => parseInt(item.id) === productCategoryId);
	                //$(this).text(productCategoryObj.name);
	                table.cell(this).data(productCategoryObj.name);
	                // console.log('FK updated for Staff '+productId);
	            });
	        }
	    } catch (error) {

	    }
	    try {
	        var productBrandFKUpdateSelector = 'tr';
	        if (!(typeof (id) === 'undefined')) {
	            // debugger;
	            productBrandFKUpdateSelector = '#row' + id;
	            var productBrandId = parseInt(obj.productBrandId);
	            var productBrandObj = productBrandData.find(item => parseInt(item.id) === productBrandId);
	            //create data
	            //$('#tableData tbody tr:first-child td:nth-child(0)').text(productBrandObj.name);

	            //update data
	            $('#tableData tbody ' + productBrandFKUpdateSelector + ' td[property=productBrandId]').text(productBrandObj.name);
	            //table.cell( this ).data(productBrandObj.name);
	        }
	        else {
	            //Page load
	            $('#tableData tbody ' + productBrandFKUpdateSelector + ' td[property=productBrandId]').each(function() {
	                // debugger;
	                var productId = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
	                var productObj = getItemById(productId);
	                var productBrandId = parseInt(productObj.productBrandId);
	                var productBrandObj = productBrandData.find(item => parseInt(item.id) === productBrandId);
	                //$(this).text(productBrandObj.name);
	                table.cell(this).data(productBrandObj.name);
	                // console.log('FK updated for Staff '+productId);
	            });
	        }
	    } catch (error) {

	    }


	    try {
	        var shopFKUpdateSelector = 'tr';
	        if (!(typeof (id) === 'undefined')) {
	            // debugger;
	            shopFKUpdateSelector = '#row' + id;
	            var shopId = parseInt(obj.shopId);
	            var shopObj = shopData.find(item => parseInt(item.id) === shopId);
	            //create data
	            //$('#tableData tbody tr:first-child td:nth-child(0)').text(shopObj.name);

	            //update data
	            $('#tableData tbody ' + shopFKUpdateSelector + ' td[property=shopId]').text(shopObj.name);
	            //table.cell( this ).data(shopObj.name);
	        }
	        else {
	            //Page load
	            $('#tableData tbody ' + shopFKUpdateSelector + ' td[property=shopId]').each(function() {
	                // debugger;
	                var productId = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
	                var productObj = getItemById(productId);
	                var shopId = parseInt(productObj.shopId);
	                var shopObj = shopData.find(item => parseInt(item.id) === shopId);
	                //$(this).text(shopObj.name);
	                table.cell(this).data(shopObj.name);
	                // console.log('FK updated for Staff '+productId);
	            });
	        }
	    } catch (error) {

	    }

	    try {
	        var productDiscountTypeFKUpdateSelector = 'tr';
	        if (!(typeof (id) === 'undefined')) {
	            // debugger;
	            productDiscountTypeFKUpdateSelector = '#row' + id;
	            var productDiscountTypeId = parseInt(obj.productDiscountTypeId);
	            var productDiscountTypeObj = productDiscountTypeData.find(item => parseInt(item.id) === productDiscountTypeId);
	            //create data
	            //$('#tableData tbody tr:first-child td:nth-child(0)').text(productDiscountTypeObj.name);

	            //update data
	            $('#tableData tbody ' + productDiscountTypeFKUpdateSelector + ' td[property=productDiscountTypeId]').text(productDiscountTypeObj.name);
	            //table.cell( this ).data(productDiscountTypeObj.name);
	        }
	        else {
	            //Page load
	            $('#tableData tbody ' + productDiscountTypeFKUpdateSelector + ' td[property=productDiscountTypeId]').each(function() {
	                // debugger;
	                var productId = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
	                var productObj = getItemById(productId);
	                var productDiscountTypeId = parseInt(productObj.productDiscountTypeId);
	                var productDiscountTypeObj = productDiscountTypeData.find(item => parseInt(item.id) === productDiscountTypeId);
	                //$(this).text(productDiscountTypeObj.name);
	                table.cell(this).data(productDiscountTypeObj.name);
	                // console.log('FK updated for Staff '+productId);
	            });
	        }
	    } catch (error) {

	    }

	    formatNumber();
	}


	function getItemById(id) {
	    const result = dataSource.find(item => parseInt(item.id) === id);
	    return result;
	}
</script>
