
    
    @{
        ViewData["Title"] = "Giao dịch";
        Layout = "_NovaticAdmin";
    }
    

    <div class="page-header card">
        <div class="col">
            <div class="page-header-title">
                <i class="fa fa-server"></i>
                <div class="d-inline">
                    <h3 class="tableTitle">Giao dịch</h3>
                </div>
            </div>

            <a href="#" id="btnAddItem" onclick="editItem(0);" class="btn btn-brand btn-elevate btn-icon-sm">
                <i class="fa fa-plus"></i>
                <span class='hideOnMobile'>New Record</span>
            </a>
        </div>
    </div>

    <div class="pcoded-inner-content">
        <div class="main-body">
            <div class="page-wrapper">

                <!-- Page-body start -->
                <div class="page-body">
                    <div class="card">
                        <div class="card-block novaticContainer">
                            <div class="dt-responsive table-responsive">

                                <table id="tableData" class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Index</th>
						<th>Loại giao dịch</th>
						<th>Trạng thái giao dịch</th>
						<th>Tiêu đề</th>
						<th>Ngày tạo</th>
						<th>Số tiền</th>
						<th>Thông tin người gửi</th>
						<th>Thông tin người nhận</th>

                                            <th>Detail</th>
                                            <th>Delete</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th>Index</th>
						<th>Loại giao dịch</th>
						<th>Trạng thái giao dịch</th>
						<th>Tiêu đề</th>
						<th>Ngày tạo</th>
						<th>Số tiền</th>
						<th>Thông tin người gửi</th>
						<th>Thông tin người nhận</th>

                                            <th> </th>
                                            <th> </th>
                                        </tr>
                                    </tfoot>
                                </table>

                                <div class="modal fade" id="modal-id">
                                    <div class="modal-dialog modal-lg">
                                        <div class="modal-content">
                                            <div class="modal-header bg-gradient-info">
                                                <button type="button" class="close" data-dismiss="modal"
                                                    aria-hidden="true">&times;</button>
                                                <h4 class="modal-title"><i class="fa fa-edit"></i> Detail item</h4>
                                            </div>
                                            <div class="modal-body">


                                                <form action="" method="POST"
                                                    onsubmit='updateItem(updatingItemId); return false;' role="form">

                                                    <!-- <div class="form-group">
                                                                        <label for="">Apply type Id</label>
                                                                        <input type="text" class="form-control"
                                                                            id="transactionsId" required readonly
                                                                            placeholder="">
                                                                    </div>


                                                                    <div class='form-group'>
                                                                        <label for=''>Apply type name</label>
                                                                        <input type='text' class='form-control'
                                                                            id='transactionsName' required
                                                                            placeholder=''>
                                                                    </div>


                                                                    <div class='form-group'>
                                                                        <label for=''>Description</label>
                                                                        <input type='text' class='form-control'
                                                                            id='transactionsDescription'
                                                                            placeholder=''>
                                                                    </div>


                                                                    <div class='form-group'>
                                                                        <label for=''>CreatedTime</label>
                                                                        <input type='text'
                                                                            class='form-control datetimepicker'
                                                                            id='transactionsCreatedTime'
                                                                            placeholder=''>
                                                                    </div>


                                                                    <div class='form-group' style="">
                                                                        <label for=''>Active</label>
                                                                        <input type='text' class='form-control'
                                                                            id='transactionsActive' readonly
                                                                            placeholder=''>
                                                                    </div>
                                                                    -->
                                                      <div class="form-group  col-sm-12"   >
                    <label for="">Id</label><span class='required'>*</span>
                    <input type="number" class="form-control input-id" value="0"
                        id="transactionsId" required readonly
                        placeholder="">
                </div>   <div class="form-group  col-sm-12">
                    <label for="">GUID</label>
                    <input type="text" class="form-control  input-guId"
                        id="transactionsGuId"   
                        placeholder="">
                </div><div class='form-group  col-sm-12 selectContainer'>
                        <label class=''>Loại giao dịch</label><span class='required'>*</span>
                        <div class='col-sm-12'>
                            <select name='select' required id='transactionsTransactionTypeId' class='form-control fill dataSelect  input-transactionTypeId' style=' border: 1px solid #e9ecef; '>
                            </select>
                        </div>
                    </div>
                    <script>
                    var transactionTypeData =[];
                    function loadDataSelectTransactionType() {
                        return $.ajax({
                            url: '@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}' + 'transactionType/api/list',
                            type: 'GET',
                            async:'true',
                            contentType: 'application/json',
                            success: function(responseData) {
                                console.log(new Date().getSeconds()+':'+new Date().getMilliseconds()+' - loaded transactionType');
                                // debugger;
                                var data = responseData.data;
                                transactionTypeData = data;
                                data.forEach(function(item, index) {
                                    var data = {
                                        id: item.id,
                                        text: item.name
                                    };
                                    var newOption = new Option(data.text, data.id, false, false);
                                    $('#transactionsTransactionTypeId').append(newOption).trigger('change');
                                }); 
                            },
                            error: function(e) {
                                //console.log(e.message);
                            }
                        });
                    }
                    $(document).ready(function() {
                        //loadDataSelectTransactionType();
                    });
                    </script><div class='form-group  col-sm-12 selectContainer'>
                        <label class=''>Trạng thái giao dịch</label><span class='required'>*</span>
                        <div class='col-sm-12'>
                            <select name='select' required id='transactionsTransactionStatusId' class='form-control fill dataSelect  input-transactionStatusId' style=' border: 1px solid #e9ecef; '>
                            </select>
                        </div>
                    </div>
                    <script>
                    var transactionStatusData =[];
                    function loadDataSelectTransactionStatus() {
                        return $.ajax({
                            url: '@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}' + 'transactionStatus/api/list',
                            type: 'GET',
                            async:'true',
                            contentType: 'application/json',
                            success: function(responseData) {
                                console.log(new Date().getSeconds()+':'+new Date().getMilliseconds()+' - loaded transactionStatus');
                                // debugger;
                                var data = responseData.data;
                                transactionStatusData = data;
                                data.forEach(function(item, index) {
                                    var data = {
                                        id: item.id,
                                        text: item.name
                                    };
                                    var newOption = new Option(data.text, data.id, false, false);
                                    $('#transactionsTransactionStatusId').append(newOption).trigger('change');
                                }); 
                            },
                            error: function(e) {
                                //console.log(e.message);
                            }
                        });
                    }
                    $(document).ready(function() {
                        //loadDataSelectTransactionStatus();
                    });
                    </script>   <div class="form-group  col-sm-12">
                    <label for="">Tiêu đề</label><span class='required'>*</span>
                    <input type="text" class="form-control  input-name"
                        id="transactionsName" required  
                        placeholder="">
                </div>   
                <div class="form-group col-sm-12">
                    <label for="">Mô tả</label>
                    <textarea class="form-control  input-description " rows="2"  id="transactionsDescription" ></textarea>
                </div>   
                <div class="form-group col-sm-12">
                    <label for="">Nội dung</label>
                    <textarea class="form-control  input-info " rows="2"  id="transactionsInfo" ></textarea>
                </div>
                    <script>
                    var transactionsInfoEditor;
                    ClassicEditor
                        .create( document.querySelector('#transactionsInfo'))
                        .then( editor => {
                            // console.log( 'Editor was initialized', editor );
                            transactionsInfoEditor = editor;
                            editor.model.document.on( 'change:data', ( evt, data ) => {
                                // debugger;
                                // console.log('Updated:'+ data );
                                $('#transactionsInfo').val(transactionsInfoEditor.getData());
                            });
                        })
                        .catch( err => {
                            console.error( err.stack );
                        }); 
                    </script> <div class="form-group  col-sm-12" style="display:none "  >
                    <label for="">Active</label><span class='required'>*</span>
                    <input type="number" class="form-control input-active" value="0"
                        id="transactionsActive" required  
                        placeholder="">
                </div><div class='form-group col-sm-12'>
                                            <label for=''>Ngày tạo </label><span class='required'>*</span>
                                            <div class='input-group date datetimepicker  input-createdTime' id='transactionsCreatedTimeDiv'>
                                                <input type='text' id="transactionsCreatedTime" required class="form-control" required/>
                                                <span class="input-group-addon"> <span class="glyphicon glyphicon-calendar"></span>
                                                </span>
                                            </div>
                                        </div> <div class="form-group  col-sm-12"   >
                    <label for="">Số tiền</label><span class='required'>*</span>
                    <input type="number" class="form-control input-amount" value="0"
                        id="transactionsAmount" required  
                        placeholder="">
                </div>   
                <div class="form-group col-sm-12">
                    <label for="">Thông tin người gửi</label>
                    <textarea class="form-control  input-senderInfo " rows="2"  id="transactionsSenderInfo" ></textarea>
                </div>
                    <script>
                    var transactionsSenderInfoEditor;
                    ClassicEditor
                        .create( document.querySelector('#transactionsSenderInfo'))
                        .then( editor => {
                            // console.log( 'Editor was initialized', editor );
                            transactionsSenderInfoEditor = editor;
                            editor.model.document.on( 'change:data', ( evt, data ) => {
                                // debugger;
                                // console.log('Updated:'+ data );
                                $('#transactionsSenderInfo').val(transactionsSenderInfoEditor.getData());
                            });
                        })
                        .catch( err => {
                            console.error( err.stack );
                        }); 
                    </script>   
                <div class="form-group col-sm-12">
                    <label for="">Thông tin người nhận</label>
                    <textarea class="form-control  input-receiverInfo " rows="2"  id="transactionsReceiverInfo" ></textarea>
                </div>
                    <script>
                    var transactionsReceiverInfoEditor;
                    ClassicEditor
                        .create( document.querySelector('#transactionsReceiverInfo'))
                        .then( editor => {
                            // console.log( 'Editor was initialized', editor );
                            transactionsReceiverInfoEditor = editor;
                            editor.model.document.on( 'change:data', ( evt, data ) => {
                                // debugger;
                                // console.log('Updated:'+ data );
                                $('#transactionsReceiverInfo').val(transactionsReceiverInfoEditor.getData());
                            });
                        })
                        .catch( err => {
                            console.error( err.stack );
                        }); 
                    </script>




                                                    <input style="display:none" id="hiddenSubmit" type="submit"
                                                        class="btn btn-default" value="Save changes">
                                                </form>


                                            </div>
                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-default"
                                                    data-dismiss="modal">Close</button>
                                                <button type="button" class="btn btn-primary" id="btnUpdateItem"
                                                    onclick="document.getElementById('hiddenSubmit').click();">Save
                                                    changes</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
                             
    
    <script>
        var hiddenItem = ["id","guId","description","info","active"];
        var showItem = ["transactionTypeId","transactionStatusId","name","createdTime","amount","senderInfo","receiverInfo"];
        var dataSource = [];
        var updatingItemId = 0;
        var tableUpdating = 0;
        var table;

        $(document).ready(function () {
            // Load data
            //loadData();
            //setTimeout(function(){loadData();}, 460);  
                
            $.when( loadDataSelectTransactionType(),loadDataSelectTransactionStatus()).done(function( resultDataSelectTransactionTypetransactionsTransactionTypeId,resultDataSelectTransactionStatustransactionsTransactionStatusId) {
                loadData();
            });

            // includeLibrary();

            // Datetime picker
            $('.datetimepicker').datetimepicker({
                format: 'YYYY-MM-DD HH:mm:ss'
            });

            $('.dataSelect').select2();

            $(".datetimepicker").on('dp.change', function (e) {
                // console.log(this.value);
                this.value = moment(this.value).format("YYYY-MM-DD HH:mm:ss");
                // console.log(this.value);
            })

        });


        function loadData() {
            $.ajax({
                url: '@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}'+ "transactions/api/list",
                type: "GET",
                contentType: "application/json",
                success: function (responseData) {
                    // debugger;
                    var data = responseData.data;
                    dataSource = data;




                    data.forEach(function (item, index) {
                        // console.log(item, index);
                        var rowContent = "";
                        rowContent += "<td style='text-align: center;'>" + (index + 1) + "</td>";
                        for (var key in item) {
                            if (item.hasOwnProperty(key)) {
                                // console.log(key + " -> " + item[key]);
                                if (showItem.includes(key)) {
                                    if (key != "photo") {
                                        rowContent += "<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>";
                                    }
                                    else {
                                        rowContent += "<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'><img src='" + item[key] + "' style='height:80px;' /></td>";
                                    }
                                }
                            }
                        }
                        rowContent += "<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>";
                        rowContent += "<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>";
                        
                        var newRow = "<tr id='row"+item.id+"' >" + rowContent + "</tr>";
                        $(newRow).appendTo($("#tableData tbody"));
                        
                        // $("#tableData #dummyRow").after("<tr id='row"+item.id+"' >" + rowContent + "</tr>");
                    });

                    //Init datatable
                    if (tableUpdating === 0) {
                        initTable();
                    }

                    //update data with foreign key
                    updateTable();
                },
                error: function (e) {
                    //console.log(e.message);
                    initTable();
                }
            });
        }

        function initTable(){
            table = $('#tableData').DataTable({
                aLengthMenu: [
                    [-1, 10, 25, 50, 100, 200],
                    ['Tất cả', 10, 25, 50, 100, 200]
                ],
                'order': [
                    [1, 'desc']
                ]
            });


            
            table.on('order.dt search.dt', function() {
                table.column(0, {
                    search: 'applied',
                    order: 'applied'
                }).nodes().each(function(cell, i) {
                    cell.innerHTML = i + 1;
                });
            }).draw();

            $('#tableData tfoot th:not(:last-child):not(:nth-last-child(2))').each(function() {
                var title = $(this).text();
                $(this).html("<input type='text' class='tableFooterFilter' placeholder=' ' />");
            });

            table.columns().every(function() {
                var that = this;

                $('input', this.footer()).on('keyup change', function() {
                    if (that.search() !== this.value) {
                        that
                            .search(this.value)
                            .draw();
                    }
                });
            });

            setTimeout(function() {
                table.page.len(10).draw();
            }, 1000);
            
        }

        function editItem(id) {
            updatingItemId = id;
            $("#modal-id").modal('show');

            let obj = getItemById(id);
            		$("#transactionsId").val(id > 0 ? obj.id : "");
		$("#transactionsGuId").val(id > 0 ? obj.guId : "");
		$("#transactionsTransactionTypeId").val(id > 0 ? obj.transactionTypeId : "");
		$("#transactionsTransactionStatusId").val(id > 0 ? obj.transactionStatusId : "");
		$("#transactionsName").val(id > 0 ? obj.name : "");
		$("#transactionsDescription").val(id > 0 ? obj.description : "");
		$("#transactionsInfo").val(id > 0 ? obj.info : "");
		$("#transactionsActive").val(id > 0 ? obj.active : "");
		$("#transactionsCreatedTime").val(id > 0 ? obj.createdTime : "");
		$("#transactionsAmount").val(id > 0 ? obj.amount : "");
		$("#transactionsSenderInfo").val(id > 0 ? obj.senderInfo : "");
		$("#transactionsReceiverInfo").val(id > 0 ? obj.receiverInfo : "");
$('#transactionsTransactionTypeId').trigger('change');
$('#transactionsTransactionStatusId').trigger('change');
transactionsInfoEditor.setData((id > 0 ? obj.info : ''));
transactionsSenderInfoEditor.setData((id > 0 ? obj.senderInfo : ''));
transactionsReceiverInfoEditor.setData((id > 0 ? obj.receiverInfo : ''));

            // $("#transactionsId").val(id > 0 ? obj.id : "");
            // $("#transactionsName").val(id > 0 ? obj.name : "");
            // $("#transactionsDescription").val(id > 0 ? obj.description : "");
            // $("#transactionsCreatedTime").val(id > 0 ? obj.createdTime : "");
            // $("#transactionsActive").val(id > 0 ? obj.active : "");

            if(id==0){
                $("#transactionsActive").val(1);
                $("#transactionsCreatedTime").val(new Date().toISOString().replace(/T/, ' ').replace(/\..+/, ''));
            }
            else{
                // correcting data
                //$('#buyProvinceId').val(obj.provinceId.split(", ")).trigger('change');
                
            }
            formatNumber();
        }


        function updateItem(id) {
            var actionName = (id == 0 ? "Create" : "Update");
            let obj = getItemById(id);
            let objName = id > 0 ? obj.name : " ";

            validateInputNumber();

            // "id": $("#transactionsId").val(),
            // "name": $("#transactionsName").val(),
            // "description": $("#transactionsDescription").val(),
            // "createdTime": $("#transactionsCreatedTime").val(),
            // "active": $("#transactionsActive").val()
            var updatingObj = {
                		"id": $("#transactionsId").val(),
		"guId": $("#transactionsGuId").val(),
		"transactionTypeId": $("#transactionsTransactionTypeId").val(),
		"transactionStatusId": $("#transactionsTransactionStatusId").val(),
		"name": $("#transactionsName").val(),
		"description": $("#transactionsDescription").val(),
		"info": $("#transactionsInfo").val(),
		"active": $("#transactionsActive").val(),
		"createdTime": datetimeFormat($("#transactionsCreatedTime").val()),
		"amount": $("#transactionsAmount").val(),
		"senderInfo": $("#transactionsSenderInfo").val(),
		"receiverInfo": $("#transactionsReceiverInfo").val(),

            };

            // correcting data
            //updatingObj.provinceId = updatingObj.provinceId.join(", ");
            

            Swal.fire({
                title: 'Are you sure?',
                text: "Performing " + actionName + " item " + objName,
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#443',
                confirmButtonText: 'Yes, confirm!'
            }).then((result) => {
                if (result.value) {
                    $("#modal-id").modal('hide');

                    //CALL AJAX TO UPDATE
                    if (id > 0) {
                        $.ajax({
                            url: '@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}'+ "transactions/api/update",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(updatingObj),
                            success: function (responseData) {
                                // debugger;
                                if (responseData.status == 200 && responseData.message === "SUCCESS") {
                                    Swal.fire(
                                        'Updated!',
                                        'Item ' + objName + ' has been successfully updated!',
                                        'success'
                                    );
                                    updateTable(id,updatingObj,"update");
                                    var updatedItemIndex= dataSource.findIndex(item => parseInt(item.id) === id);
                                    dataSource[updatedItemIndex] = updatingObj;
                                }
                            },
                            error: function (e) {
                                //console.log(e.message);
                                Swal.fire(
                                    'Error!',
                                    'Couldn\'t update item, please check your data',
                                    'error'
                                );
                            }
                        });
                    };

                    //CALL AJAX TO CREATE
                    if (id == 0) {
                        updatingObj.id = 1;
                        delete updatingObj["id"]
                        updatingObj.active = 1;
                        updatingObj.createdTime = new Date();
                        console.log(updatingObj);
                        $.ajax({
                            url:'@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}' + "transactions/api/add",
                            type: "POST",
                            contentType: "application/json",
                            data: JSON.stringify(updatingObj),
                            success: function (responseData) {
                                // debugger;
                                if (responseData.status == 201 && responseData.message === "CREATED") {
                                    Swal.fire(
                                        'Created!',
                                        'New item has been successfully created!',
                                        'success'
                                    );
                                    updatingObj = responseData.data;
                                    dataSource.push(updatingObj);
                                    updateTable(0,updatingObj,"add");
                                }
                            },
                            error: function (e) {
                                //console.log(e.message);
                                Swal.fire(
                                    'Error!',
                                    'Couldn\'t create item, please check your data',
                                    'error'
                                );
                            }
                        });
                    }
                }
            })
        }

        function deleteItem(id) {
            let obj = getItemById(id);
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {

                    //CALL AJAX TO DELETE
                    $.ajax({
                        url: '@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}' + "transactions/api/delete",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify({ "id": id }),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status == 200 && responseData.message === "SUCCESS") {
                                Swal.fire(
                                    'Deleted!',
                                    'Item ' + obj.name + ' has been deleted.',
                                    'success'
                                );
                                updateTable(id,0,"delete");
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Item ' + obj.name + ' can\'t be deleted.',
                                'error'
                            );
                        }
                    });

                }
            })
        }

        function updateTable(id,obj,action) {
            if(action === "delete"){ 
                table.row("#row"+id).remove().draw();
            }

            if(action === "add"){
                console.log("Added:"+obj);

                //var addedItems = [obj];
                var addedItems = obj;
                var addedValues =[];


                addedItems.forEach(function (item, index) {
                    // console.log(item, index);
                    var rowContent = "";
                    addedValues.push("<td style='text-align: center;'></td>");
                    for (var key in item) {
                        if (item.hasOwnProperty(key)) {
                            // console.log(key + " -> " + item[key]);
                            if (showItem.includes(key)) {
                                if (key != "photo") {
                                    addedValues.push ("<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>");
                                }
                                else {
                                    addedValues.push ("<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'><img src='" + item[key] + "' style='height:80px;' /></td>");
                                }
                            }
                        }
                    }
                    addedValues.push("<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>");
                    addedValues.push("<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>");

                    table.row.add(addedValues).draw();
                });
                // location.reload();
            }

            if(action === "update"){
                // alert(id);
                $(".row"+id+"-column").each(function(){
                    var propertyName = $(this).attr("property");
                    console.log(propertyName);
                    
                    for (var key in obj) {
                        if (key === propertyName && obj.hasOwnProperty(key)) {
                            if(key === "photo"){
                                $(this).children().attr("src",obj[key]);
                            }
                            else{
                                this.innerText = obj[key];
                            }
                        }
                    }

                });
            }

            //Update columns with foreign key
            // var NO_FKFKUpdateSelector = 'tr';
            // if( !(typeof(id) === 'undefined')) {
            //     NO_FKFKUpdateSelector = '#row'+id;
            // }
            // $('#tableData tbody '+NO_FKFKUpdateSelector+' td[property=NO_FKId]').each(function(){
            //     // debugger;
            //     var transactionsId = parseInt($(this).attr('class').replace('row','').replace('-column',''));
            //     var transactionsObj = getItemById(transactionsId);
            //     var NO_FKId = parseInt(transactionsObj.NO_FKId);
            //     var NO_FKObj = NO_FKData.find(item => parseInt(item.id) === NO_FKId);
            //     $(this).text(NO_FKObj.name);
            //     // console.log('FK updated for Staff '+transactionsId);
            // });
             
            try {
                var transactionTypeFKUpdateSelector = 'tr';
                if( !(typeof(id) === 'undefined')) {
                    // debugger;
                    transactionTypeFKUpdateSelector = '#row'+id;
                    var transactionTypeId = parseInt(obj.transactionTypeId);
                    var transactionTypeObj = transactionTypeData.find(item => parseInt(item.id) === transactionTypeId);
                    //create data
                    //$('#tableData tbody tr:first-child td:nth-child(0)').text(transactionTypeObj.name);

                    //update data
                    $('#tableData tbody '+transactionTypeFKUpdateSelector+' td[property=transactionTypeId]').text(transactionTypeObj.name);
                    //table.cell( this ).data(transactionTypeObj.name);
                }
                else{
                    //Page load
                    $('#tableData tbody '+transactionTypeFKUpdateSelector+' td[property=transactionTypeId]').each(function(){
                        // debugger;
                        var transactionsId = parseInt($(this).attr('class').replace('row','').replace('-column',''));
                        var transactionsObj = getItemById(transactionsId);
                        var transactionTypeId = parseInt(transactionsObj.transactionTypeId);
                        var transactionTypeObj = transactionTypeData.find(item => parseInt(item.id) === transactionTypeId);
                        //$(this).text(transactionTypeObj.name);
                        table.cell( this ).data(transactionTypeObj.name);
                        // console.log('FK updated for Staff '+transactionsId);
                    });
                }
            } catch (error) {
                
            } 
            try {
                var transactionStatusFKUpdateSelector = 'tr';
                if( !(typeof(id) === 'undefined')) {
                    // debugger;
                    transactionStatusFKUpdateSelector = '#row'+id;
                    var transactionStatusId = parseInt(obj.transactionStatusId);
                    var transactionStatusObj = transactionStatusData.find(item => parseInt(item.id) === transactionStatusId);
                    //create data
                    //$('#tableData tbody tr:first-child td:nth-child(0)').text(transactionStatusObj.name);

                    //update data
                    $('#tableData tbody '+transactionStatusFKUpdateSelector+' td[property=transactionStatusId]').text(transactionStatusObj.name);
                    //table.cell( this ).data(transactionStatusObj.name);
                }
                else{
                    //Page load
                    $('#tableData tbody '+transactionStatusFKUpdateSelector+' td[property=transactionStatusId]').each(function(){
                        // debugger;
                        var transactionsId = parseInt($(this).attr('class').replace('row','').replace('-column',''));
                        var transactionsObj = getItemById(transactionsId);
                        var transactionStatusId = parseInt(transactionsObj.transactionStatusId);
                        var transactionStatusObj = transactionStatusData.find(item => parseInt(item.id) === transactionStatusId);
                        //$(this).text(transactionStatusObj.name);
                        table.cell( this ).data(transactionStatusObj.name);
                        // console.log('FK updated for Staff '+transactionsId);
                    });
                }
            } catch (error) {
                
            }
            
            formatNumber();
        }


        function getItemById(id) {
            const result = dataSource.find(item => parseInt(item.id) === id);
            return result;
        } 

            
    </script>