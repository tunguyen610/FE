@{
    ViewData["Title"] = "Admin News Category";
    Layout = "_NovaticAdmin";
}


<!-- 1. Title -->
<div class="page-header card">
    <div class="col">

        <div class="page-header-title">
            <i class="fa fa-server"></i>
            <div class="d-inline">
                <h3 class="tableTitle">Loại ứng tuyển</h3>
            </div>
        </div>

        <a href="#" id="btnAddItem" onclick="editItem(0);"
           class="btn btn-brand btn-elevate btn-icon-sm">
            <i class="fa fa-plus"></i>
            <span class='hideOnMobile'>New Record</span>
        </a>
    </div>
</div>
<!-- 1. Title ends-->
<!-- 2. Table -->
<div class="pcoded-inner-content">
    <div class="main-body">
        <div class="page-wrapper">
            <div class="card">
                <div class="card-block novaticContainer">
                    <div class="dt-responsive table-responsive">
                        <table id="tableData" class="table table-striped table-bordered nowrap">
                            <thead class="thead-light">
                                <tr>
                                    <th class="th-index">Index</th>
                                    <th class="th-id">ID</th>
                                    <th class="th-name">Tên danh mục</th>
                                    <th class="th-description">Description</th>
                                    <th class="th-createdTime">Ngày tạo</th>
                                    <!--<th>Active</th>-->
                                    <th class="th-detail">Chi tiết</th>
                                    <th class="th-delete">Xóa</th>
                                </tr>
                            </thead>

                            <tbody>
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th>Index</th>
                                    <th>ID</th>
                                    <th>Tên danh mục</th>
                                    <th>Description</th>
                                    <th>Ngày tạo</th>
                                    <!--<th>Active</th>-->
                                    <th>Chi tiết</th>
                                    <th>Xóa</th>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- 2. Table ends -->
<!-- 3. Update form modal -->
<div class="modal fade" id="modal-id">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-gradient-info">
                <h4 class="modal-title">
                    <i class="fa fa-edit"></i>Chi tiết
                </h4>
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">  &times; </button>
            </div>
            <div class="modal-body">
                <form action="" method="POST"
                      onsubmit="updateItem(updatingItemID); return false;" role="form">

                    <div class="form-group">
                        <label for="">ID</label><span class='required'>*</span>
                        <input type="number"
                               class="form-control input-id"
                               value="0" id="newsCategoryId" required
                               readonly placeholder="">
                    </div>
                    <div class="form-group"
                         style="display:none ">
                        <label for="">Active</label><span class='required'>*</span>
                        <input type="number"
                               class="form-control input-active"
                               value="0" id="newsCategoryActive"
                               required placeholder="">
                    </div>
                    <div class="form-group">
                        <label for="">Tên</label><span class='required'>*</span>
                        <input type="text"
                               class="form-control  input-name"
                               id="newsCategoryName" required
                               placeholder="">
                    </div>
                    <div class="form-group">
                        <label for="">Mô tả</label>
                        <textarea class="form-control  input-description "
                                  rows="2"
                                  id="newsCategoryDescription"></textarea>
                    </div>
                    <div class='form-group'>
                        <label for=''>Ngày tạo </label><span class='required'>*</span>
                        <div class='input-group date datetimepicker  input-createdTime'
                             id='newsCategoryCreatedTimeDiv'>
                            <input type='text'
                                   id="newsCategoryCreatedTime"
                                   required class="form-control" />
                            <span class="input-group-addon">
                                <span class="glyphicon glyphicon-calendar"></span>
                            </span>
                        </div>
                    </div>


                    <input style="display:none"
                           id="hiddenSubmit" type="submit"
                           class="btn btn-default"
                           value="Save changes">
                </form>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default"
                        data-dismiss="modal">
                    Close
                </button>
                <button type="button" class="btn btn-primary"
                        id="btnUpdateItem"
                        onclick="document.getElementById('hiddenSubmit').click();">
                    Save
                    changes
                </button>
            </div>
        </div>
    </div>
</div>
<!-- 3. Update form modal ends -->


<script>
    var table;
    var hiddenItem = ["active"];
    var dataSource = [];
    var updatingItemID = 0;
    var tableUpdating = 0;

    $(document).ready(function () {
        // Load data
        loadData();
        // includeLibrary();
        //debugger;
        // Datetime picker
        $('.datetimepicker').datetimepicker({
            format: 'DD-MM-YYYY HH:mm:ss'
        });

        $('.dataSelect').select2();

        $(".datetimepicker").on('dp.change', function (e) {
            // console.log(this.value);
            this.value = moment(this.value).format("DD-MM-YYYY HH:mm:ss");
            // console.log(this.value);
        })

    });


    function loadData() {
        $.ajax({
            url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}/newsCategory/api/list",
            type: "GET",
            contentType: "application/json",
            success: function (responseData) {
                // debugger;
                var data = responseData.data;
                dataSource = data;

                data.forEach(function (item, index) {
                    // console.log(item, index);
                    var rowContent = "";
                    rowContent += "<td style='text-align: center;'>" + (index + 1) + "</td>";
                    for (var key in item) {
                        if (item.hasOwnProperty(key)) {
                            // console.log(key + " -> " + item[key]);
                            if (!hiddenItem.includes(key)) {
                                rowContent += "<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>";
                            }
                        }
                    }
                    rowContent += "<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>";
                    rowContent += "<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>";

                    var newRow = "<tr id='row" + item.id + "' >" + rowContent + "</tr>";
                    $(newRow).appendTo($("#tableData tbody"));

                    // $("#tableData #dummyRow").after("<tr id='row"+item.id+"' >" + rowContent + "</tr>");
                });

                //Init datatable
                if (tableUpdating === 0) {
                    initTable();
                }

                //update data with foreign key
                updateTable();
            },
            error: function (e) {
                //console.log(e.message);
                initTable();
            }
        });
    }

    function initTable() {

        table = $('#tableData').DataTable({
            aLengthMenu: [
                [10, 25, 50, 100, 200, -1],
                [10, 25, 50, 100, 200, 'Tất cả']
            ],
            'order': [
                [1, 'desc']
            ]
        });

        $('#tableData tfoot th').each(function () {
            var title = $(this).text();
            $(this).html('<input type="text" class="tableFooterFilter" placeholder=" " />');
        });

        table.columns().every(function () {
            var that = this;

            $('input', this.footer()).on('keyup change', function () {
                if (that.search() !== this.value) {
                    that
                        .search(this.value)
                        .draw();
                }
            });
        });
    }


    function initTable() {
        table = $('#tableData').DataTable({
            aLengthMenu: [
                [10, 25, 50, 100, 200, -1],
                [10, 25, 50, 100, 200, 'Tất cả']
            ],
            'order': [
                [1, 'desc']
            ]
        });



        table.on('order.dt search.dt', function () {
            table.column(0, {
                search: 'applied',
                order: 'applied'
            }).nodes().each(function (cell, i) {
                cell.innerHTML = i + 1;
            });
        }).draw();

        $('#tableData tfoot th:not(:last-child):not(:nth-last-child(2))').each(function () {
            var title = $(this).text();
            $(this).html("<input type='text' class='tableFooterFilter' placeholder=' ' />");
        });

        table.columns().every(function () {
            var that = this;

            $('input', this.footer()).on('keyup change', function () {
                if (that.search() !== this.value) {
                    that
                        .search(this.value)
                        .draw();
                }
            });
        });
    }

    function editItem(id) {
        updatingItemID = id;
        $("#modal-id").modal('show');

        let obj = getItemByID(id);
        $("#applyTypeId").val(id > 0 ? obj.id : "");
        $("#applyTypeActive").val(id > 0 ? obj.active : "");
        $("#applyTypeName").val(id > 0 ? obj.name : "");
        $("#applyTypeDescription").val(id > 0 ? obj.description : "");
        $("#applyTypeCreatedTime").val(id > 0 ? obj.createdTime : "");

        // $("#applyTypeId").val(id > 0 ? obj.id : "");
        // $("#applyTypeName").val(id > 0 ? obj.name : "");
        // $("#applyTypeDescription").val(id > 0 ? obj.description : "");
        // $("#applyTypeCreatedTime").val(id > 0 ? obj.createdTime : "");
        // $("#applyTypeActive").val(id > 0 ? obj.active : "");

        if (id == 0) {
            $("#applyTypeActive").val(1);
            $("#applyTypeCreatedTime").val(new Date());
        }
        else {
            // correcting data
            //$('#buyProvinceID').val(obj.provinceID.split(", ")).trigger('change');

        }
        formatNumber();
    }


    function updateItem(id) {
        var actionName = (id == 0 ? "Create" : "Update");
        let obj = getItemByID(id);
        let objName = id > 0 ? obj.name : " ";

        validateInputNumber();

        // "id": $("#applyTypeId").val(),
        // "name": $("#applyTypeName").val(),
        // "description": $("#applyTypeDescription").val(),
        // "createdTime": $("#applyTypeCreatedTime").val(),
        // "active": $("#applyTypeActive").val()
        var updatingObj = {
            "id": $("#applyTypeId").val(),
            "active": $("#applyTypeActive").val(),
            "name": $("#applyTypeName").val(),
            "description": $("#applyTypeDescription").val(),
            "createdTime": datetimeFormat($("#applyTypeCreatedTime").val()),

        };

        // correcting data
        //updatingObj.provinceID = updatingObj.provinceID.join(", ");


        Swal.fire({
            title: 'Are you sure?',
            text: "Performing " + actionName + " item " + objName,
            type: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#443',
            confirmButtonText: 'Yes, confirm!'
        }).then((result) => {
            if (result.value) {
                $("#modal-id").modal('hide');

                //CALL AJAX TO UPDATE
                if (id > 0) {
                    $.ajax({
                        url: "https://zitga.com.vn/hr/api/applyType/update.php",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(updatingObj),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status === 200 && responseData.message === "SUCCESS") {
                                Swal.fire(
                                    'Updated!',
                                    'Item ' + objName + ' has been successfully updated!',
                                    'success'
                                );
                                updateTable(id, updatingObj, "update");
                                var updatedItemIndex = dataSource.findIndex(item => parseInt(item.id) === id);
                                dataSource[updatedItemIndex] = updatingObj;
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Could\' update item, please check your data',
                                'error'
                            );
                        }
                    });
                };

                //CALL AJAX TO CREATE
                if (id == 0) {
                    updatingObj.id = 1;
                    updatingObj.active = 1;
                    console.log(updatingObj);
                    $.ajax({
                        url: "https://zitga.com.vn/hr/api/applyType/create.php",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(updatingObj),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status === 201 && responseData.message === "CREATED") {
                                Swal.fire(
                                    'Created!',
                                    'New item has been successfully created!',
                                    'success'
                                );
                                updatingObj = responseData.data;
                                dataSource.push(updatingObj);
                                updateTable(0, updatingObj, "add");
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Could\' create item, please check your data',
                                'error'
                            );
                        }
                    });
                }
            }
        })
    }

    function deleteItem(id) {
        let obj = getItemByID(id);
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {

                //CALL AJAX TO DELETE
                $.ajax({
                    url: "https://zitga.com.vn/hr/api/applyType/delete.php",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ "id": id }),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status === 200 && responseData.message === "SUCCESS") {
                            Swal.fire(
                                'Deleted!',
                                'Item ' + obj.name + ' has been deleted.',
                                'success'
                            );
                            updateTable(id, 0, "delete");
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Error!',
                            'Item ' + obj.name + ' can\'t be deleted.',
                            'error'
                        );
                    }
                });

            }
        })
    }

    function updateTable(id, obj, action) {
        if (action === "delete") {
            table.row("#row" + id).remove().draw();
        }

        if (action === "add") {
            console.log("Added:" + obj);

            var addedItems = [obj];
            var addedValues = [];


            addedItems.forEach(function (item, index) {
                // console.log(item, index);
                var rowContent = "";
                addedValues.push("<td style='text-align: center;'></td>");
                for (var key in item) {
                    if (item.hasOwnProperty(key)) {
                        // console.log(key + " -> " + item[key]);
                        if (!hiddenItem.includes(key)) {
                            addedValues.push("<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>");
                        }
                    }
                }
                addedValues.push("<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>");
                addedValues.push("<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>");

                table.row.add(addedValues).draw();
            });
            // location.reload();
        }

        if (action === "update") {
            // alert(id);
            $(".row" + id + "-column").each(function () {
                var propertyName = $(this).attr("property");
                console.log(propertyName);

                for (var key in obj) {
                    if (key === propertyName && obj.hasOwnProperty(key)) {
                        this.innerText = obj[key];
                    }
                }

            });
        }

        formatNumber();
    }


    function getItemByID(id) {
        const result = dataSource.find(item => parseInt(item.id) === id);
        return result;
    }

    function camelToSentenceCase(input) {
        var text = input;
        var result = text.replace(/([A-Z])/g, " $1");
        var finalResult = result.charAt(0).toUpperCase() + result.slice(1);
        return finalResult;
    }
     

    //HELPER FUNCTION
         
    //HELPER FUNCTION ENDS
</script>