
@model Novatic.Models.PostTopic;
@{
    ViewData["Title"] = "postTopic";
    Layout = "_NovaticAdmin";
}
<style>
.column-createdTime{
    width: 150px;
}
</style>

<div class="page-header card">
    <div class="col">
        <div class="page-header-title">
            <i class="fa fa-server"></i>
            <div class="d-inline">
                <h3 class="tableTitle">Quản lý bài viết trong chủ đề</h3>
            </div>
        </div>

        <a href="#" id="btnAddItem" onclick="editItem(0);" class="btn btn-brand btn-elevate btn-icon-sm">
            <i class="fa fa-plus"></i>
            <span class='hideOnMobile'>New Record</span>
        </a>
    </div>
</div>

<div class="pcoded-inner-content">
    <div class="main-body">
        <div class="page-wrapper">

            <!-- Page-body start -->
            <div class="page-body">
                <div class="card">
                    <div class="card-block novaticContainer">
                        <div class="dt-responsive table-responsive">

                            <table id="tableData" class="table table-hover">
                                <thead>
                                    <!--<tr>
                                        <th>Index</th>
                                        <th>Apply Type ID</th>
                                        <th>Active</th>
                                        <th>Apply Type Name</th>
                                        <th>Description</th>
                                        <th>Created Time</th>
                                        <th>Detail</th>
                                        <th>Delete</th>
                                    </tr>-->
                                    <tr>
                                        <th>Index</th>
                                        <th>ID</th>
                                        <th>Topic</th>
                                        <th>Bài viết</th>
                                        @*<th>Topic name</th>*@
                                        @*<th>Mô tả</th>*@
                                        <th>Ngày tạo</th>

                                        <th>Detail</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                               
                            </table>

                            <div class="modal fade" id="modal-id">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header bg-gradient-info">
                                            <button type="button" class="close" data-dismiss="modal"
                                                    aria-hidden="true">
                                                &times;
                                            </button>
                                            <h4 class="modal-title"><i class="fa fa-edit"></i> Detail item</h4>
                                        </div>
                                        <div class="modal-body">


                                            <form action="" method="POST"
                                                  onsubmit='updateItem(updatingItemID); return false;' role="form">

                                                <div class="form-group">
                                                    <label for="">ID</label><span class='required'>*</span>
                                                    <input type="number" class="form-control input-id" value="0"
                                                           id="postTopicId" required readonly
                                                           placeholder="">
                                                </div>





                                                <div class='form-group row selectContainer'>
                                                    <label class=''>Topic</label><span class='required'>*</span>
                                                    <div class='col-sm-12'>
                                                        <select name='select' required id='postTopicTopicID' class='form-control fill dataSelect  input-topicID' style=' border: 1px solid #e9ecef; '>
                                                        </select>
                                                    </div>
                                                </div>


                                                <script>
                                                    var topicData = [];
                                                    function loadDataSelectTopic() {
                                                        $.ajax({
                                                            url: '@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}topic/api/list',
                                                            type: 'GET',
                                                            async: 'true',
                                                            contentType: 'application/json',
                                                            success: function (responseData) {
                                                                console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded topic');
                                                                // debugger;
                                                                var data = responseData.data;
                                                                topicData = data;
                                                                data.forEach(function (item, index) {
                                                                    var data = {
                                                                        id: item.id,
                                                                        text: item.name
                                                                    };
                                                                    var newOption = new Option(data.text, data.id, false, false);
                                                                    $('#postTopicTopicID').append(newOption).trigger('change');
                                                                });
                                                            },
                                                            error: function (e) {
                                                                //console.log(e.message);
                                                            }
                                                        });
                                                    }
                                                    $(document).ready(function () {
                                                        loadDataSelectTopic();
                                                    });
                                                </script>


                                                <div class='form-group row selectContainer'>
                                                    <label class=''>Bài viết</label><span class='required'>*</span>
                                                    <div class='col-sm-12'>
                                                        <select name='select' required id='postTopicPostID' class='form-control fill dataSelect  input-postID' style=' border: 1px solid #e9ecef; '>
                                                        </select>
                                                    </div>
                                                </div>

                                                <script>
                                                    var postData = [];
                                                    function loadDataSelectPost() {
                                                        $.ajax({
                                                            url: '@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}post/api/ListPagingPost?pageSize=500&pageIndex=1',
                                                            type: 'GET',
                                                            async: 'true',
                                                            contentType: 'application/json',
                                                            success: function (responseData) {
                                                                console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded post');
                                                                // debugger;
                                                                var data = responseData.data;
                                                                postData = data;
                                                                data.forEach(function (item, index) {
                                                                    var data = {
                                                                        id: item.id,
                                                                        text: item.name
                                                                    };
                                                                    var newOption = new Option(data.text, data.id, false, false);
                                                                    $('#postTopicPostID').append(newOption).trigger('change');
                                                                });
                                                            },
                                                            error: function (e) {
                                                                //console.log(e.message);
                                                            }
                                                        });
                                                    }
                                                    $(document).ready(function () {
                                                        loadDataSelectPost();
                                                    });
                                                </script>
                                                <div class="form-group" style="display:none ">
                                                    <label for="">Active</label><span class='required'>*</span>
                                                    <input type="number" class="form-control input-active" value="0"
                                                           id="postTopicActive" required
                                                           placeholder="">
                                                </div>


                                                <div class="form-group">
                                                    <label for="">Tên</label>
                                                    <input type="text" class="form-control  input-name"
                                                           id="postTopicName"
                                                           placeholder="">
                                                </div>

                                                <div class="form-group">
                                                    <label for="">Mô tả</label>
                                                    <textarea class="form-control  input-description " rows="2" id="postTopicDescription"></textarea>
                                                </div>

                                                <div class='form-group'>
                                                    <label for=''>Ngày tạo </label><span class='required'>*</span>
                                                    <div class='input-group date datetimepicker  input-createdTime' id='postTopicCreatedTimeDiv'>
                                                        <input readonly type='text' id="postTopicCreatedTime" required class="form-control" required />
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar"></span>
                                                        </span>
                                                    </div>
                                                </div>




                                                <input style="display:none" id="hiddenSubmit" type="submit"
                                                       class="btn btn-default" value="Save changes">
                                            </form>


                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-default"
                                                    data-dismiss="modal">
                                                Close
                                            </button>
                                            <button type="button" class="btn btn-primary" id="btnUpdateItem"
                                                    onclick="document.getElementById('hiddenSubmit').click();">
                                                Save
                                                changes
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


<script>
    var hiddenItem = ["active","post","description","name","topic"];
    var dataSource = [];
    var updatingItemID = 0;
    var tableUpdating = 0;
    var table;

    $(document).ready(function () {
        // Load data
        //loadData();
        setTimeout(function () { loadData(); }, 500);
        // includeLibrary();

        table = $("#tableData").DataTable({
            // Design Assets
            stateSave: true,
            autoWidth: true,
            // ServerSide Setups
            processing: true,
            serverSide: true,
            // Paging Setups
            paging: true,
            // Searching Setups
            searching: { regex: true },
            // Ajax Filter
            ajax: {
                url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}/postTopic/api/LoadTable/"+@Model.TopicId,
                type: "POST",
                contentType: "application/json",
                dataType: "json",
                data: function (d) {
                    //debugger;
                    return JSON.stringify(d);
                    //d.start = 2;
                    //d.length = 10;
                }
            },
            // Columns Setups
            columns: [
                { data: 'id',
                    render: function (data, type, row, meta) {
                        //debugger;
                        var info = table.page.info();
                        return meta.row + 1 + info.page * info.length; // This contains the row index
                    }
                },
                {
                    data: "id",
                    render: function (data, type, row, meta) {
                        return `
                            <td class='row` + data + `-column column-" + id + "' property='" + id + "'>
                                <a target='_blank' style='font-weight: bold' href ='@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description` + data + `- ` + row.url + `'>` + data + `</a>
                            </td>`;
                    }
                },
                {
                    data: "topicName",
                    render: function (data, type, row, meta) {
                        return `<span class='row` + row.id + `-column ' id='row` + row.id + `-column-postAccountName'>` + data + `<span>`;
                    }
                },
                {
                    data: "postName",
                    render: function (data, type, row, meta) {
                        return `<span class='row` + row.id + `-column ' id='row`+row.id+`-column-postCategoryName'>`+data+`<span>`;
                    }
                },
                {
                    data: "createdTime",
                    render: function (data, type, row, meta) {
                        return `<span class='row` + row.id + `-column ' id='row`+row.id+`-column-name'>`+data+`</span>`;
                    }
                },
                {
                    data: "id",
                    render: function (data) {
                        //debugger;
                        var displayValue = `
                        <td style='text-align: center;'>
                            <a onclick='editItem(` + data+ `)'>
                                <i class='fa fa-edit fa-2x' style='color:#0d910f'></i>
                            </a>
                        </td>`;
                        return displayValue;
                    }
                },
                {
                    data: "id",
                    render: function (data) {
                        var displayValue = `
                            <td style='text-align: center;'>
                                <a onclick='deleteItem(` + data+ `)'>
                                    <i class='fa fa-trash fa-2x' style='color:#e91e63'></i>
                                </a>
                            </td>
                        `;
                        return displayValue;
                    }
                }
            ],
            // Column Definitions
            columnDefs: [
                { targets: "no-sort", orderable: false },
                { targets: "no-search", searchable: false },
                {
                    targets: "trim",
                    render: function (data, type, full, meta) {
                        if (type === "display") {
                            data = strtrunc(data, 10);
                        }

                        return data;
                    }
                },
                { targets: "date-type", type: "date-eu" }
            ]
        });



        // Datetime picker
        $('.datetimepicker').datetimepicker({
            format: 'YYYY-MM-DD HH:mm:ss'
        });

        $('.dataSelect').select2();

        $(".datetimepicker").on('dp.change', function (e) {
            // console.log(this.value);
            this.value = moment(this.value).format("YYYY-MM-DD HH:mm:ss");
            // console.log(this.value);
        })

    });


    function loadData() {
        $.ajax({
            url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}postTopic/api/ListByTopicId/"+@Model.TopicId,
            type: "GET",
            contentType: "application/json",
            success: function (responseData) {
                // debugger;
                var data = responseData.data;
                dataSource = data;
                




                //data.forEach(function (item, index) {
                //    // console.log(item, index);
                //    var rowContent = "";
                //    rowContent += "<td style='text-align: center;'>" + (index + 1) + "</td>";
                //    for (var key in item) {
                //        if (item.hasOwnProperty(key)) {
                //            // console.log(key + " -> " + item[key]);
                //            if (!hiddenItem.includes(key)) {
                //                rowContent += "<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>";
                //            }
                //        }
                //    }
                //    rowContent += "<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>";
                //    rowContent += "<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>";

                //    var newRow = "<tr id='row" + item.id + "' >" + rowContent + "</tr>";
                //    $(newRow).appendTo($("#tableData tbody"));

                //    // $("#tableData #dummyRow").after("<tr id='row"+item.id+"' >" + rowContent + "</tr>");
                //});

                //Init datatable
                if (tableUpdating === 0) {
                    //initTable();
                }

                //update data with foreign key
                updateTable();
            },
            error: function (e) {
                //console.log(e.message);
                //initTable();
            }
        });
    }

    //function initTable() {
    //    table = $('#tableData').DataTable({
    //        aLengthMenu: [
    //            [10, 25, 50, 100, 200, -1],
    //            [10, 25, 50, 100, 200, 'Tất cả']
    //        ],
    //        'order': [
    //            [1, 'desc']
    //        ]
    //    });



    //    table.on('order.dt search.dt', function () {
    //        table.column(0, {
    //            search: 'applied',
    //            order: 'applied'
    //        }).nodes().each(function (cell, i) {
    //            cell.innerHTML = i + 1;
    //        });
    //    }).draw();

    //    $('#tableData tfoot th:not(:last-child):not(:nth-last-child(2))').each(function () {
    //        var title = $(this).text();
    //        $(this).html("<input type='text' class='tableFooterFilter' placeholder=' ' />");
    //    });

    //    table.columns().every(function () {
    //        var that = this;

    //        $('input', this.footer()).on('keyup change', function () {
    //            if (that.search() !== this.value) {
    //                that
    //                    .search(this.value)
    //                    .draw();
    //            }
    //        });
    //    });
    //}

    function editItem(id) {
        updatingItemID = id;
        $("#modal-id").modal('show');

        let obj = getItemByID(id);
        $("#postTopicId").val(id > 0 ? obj.id : "");
        $("#postTopicPostID").val(id > 0 ? obj.postId : "");
        $("#postTopicTopicID").val(id > 0 ? obj.topicId : "");
        $("#postTopicActive").val(id > 0 ? obj.active : "");
        $("#postTopicName").val(id > 0 ? obj.name : "");
        $("#postTopicDescription").val(id > 0 ? obj.description : "");
        $("#postTopicCreatedTime").val(id > 0 ? obj.createdTime : "");
        $('#postTopicPostID').trigger('change');
        $('#postTopicTopicID').trigger('change');

        //if (obj.postId == undefined) {
        //    $("#postTopicPostID").val(id > 0 ? obj.postID : "");
        //    $("#postTopicTopicID").val(id > 0 ? obj.topicID : "");
        //}

        // $("#postTopicId").val(id > 0 ? obj.id : "");
        // $("#postTopicName").val(id > 0 ? obj.name : "");
        // $("#postTopicDescription").val(id > 0 ? obj.description : "");
        // $("#postTopicCreatedTime").val(id > 0 ? obj.createdTime : "");
        // $("#postTopicActive").val(id > 0 ? obj.active : "");

        if (id == 0) {
            $("#postTopicActive").val(1);
            $("#postTopicCreatedTime").val(new Date());
        }
        else {
            // correcting data
            //$('#buyProvinceID').val(obj.provinceID.split(", ")).trigger('change');

        }
        formatNumber();
    }


    function updateItem(id) {
        var actionName = (id == 0 ? "Create" : "Update");
        let obj = getItemByID(id);
        let objName = id > 0 ? obj.name : " ";

        validateInputNumber();

        // "id": $("#postTopicId").val(),
        // "name": $("#postTopicName").val(),
        // "description": $("#postTopicDescription").val(),
        // "createdTime": $("#postTopicCreatedTime").val(),
        // "active": $("#postTopicActive").val()
        var updatingObj = {
            "id": $("#postTopicId").val(),
            "postID": $("#postTopicPostID").val(),
            "topicID": $("#postTopicTopicID").val(),
            "active": $("#postTopicActive").val(),
            "name": $("#postTopicName").val(),
            "description": $("#postTopicDescription").val(),
            "createdTime":"2019-01-01 00:00:00",

        };

        // correcting data
        //updatingObj.provinceID = updatingObj.provinceID.join(", ");
        //$("#postTopicCreatedTime").val("2019-01-01 00:00:00");

        Swal.fire({
            title: 'Are you sure?',
            text: "Performing " + actionName + " item " + objName,
            type: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#443',
            confirmButtonText: 'Yes, confirm!'
        }).then((result) => {
            if (result.value) {
                $("#modal-id").modal('hide');

                //CALL AJAX TO UPDATE
                if (id > 0) {
                    $.ajax({
                        url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}postTopic/api/update",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(updatingObj),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status == 200 && responseData.message === "SUCCESS") {
                                Swal.fire(
                                    'Updated!',
                                    'Item ' + objName + ' has been successfully updated!',
                                    'success'
                                );
                                updateTable(id, updatingObj, "update");
                                var updatedItemIndex = dataSource.findIndex(item => parseInt(item.id) === id);
                                dataSource[updatedItemIndex] = updatingObj;
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Could\' update item, please check your data',
                                'error'
                            );
                        }
                    });
                };

                //CALL AJAX TO CREATE
                if (id == 0) {
                    updatingObj.id = 1;
                    delete updatingObj["id"]
                    updatingObj.active = 1;
                    updatingObj.createdTime = new Date();
                    console.log(updatingObj);
                    $.ajax({
                        url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}postTopic/api/add",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(updatingObj),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status == 201 && responseData.message === "CREATED") {
                                Swal.fire(
                                    'Created!',
                                    'New item has been successfully created!',
                                    'success'
                                );
                                updatingObj = responseData.data;
                                dataSource.push(updatingObj);
                                updateTable(0, updatingObj, "add");
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Could\' create item, please check your data',
                                'error'
                            );
                        }
                    });
                }
            }
        })
    }

    function deleteItem(id) {
        let obj = getItemByID(id);
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {

                //CALL AJAX TO DELETE
                $.ajax({
                    url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}postTopic/api/delete",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ "id": id }),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status == 200 && responseData.message === "SUCCESS") {
                            Swal.fire(
                                'Deleted!',
                                'Item ' + obj.name + ' has been deleted.',
                                'success'
                            );
                            updateTable(id, 0, "delete");
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Error!',
                            'Item ' + obj.name + ' can\'t be deleted.',
                            'error'
                        );
                    }
                });

            }
        })
    }

    function updateTable(id, obj, action) {
        if (action === "delete") {
            table.row("#row" + id).remove().draw();
        }

        if (action === "add") {
            console.log("Added:" + obj);

            //var addedItems = [obj];
            var addedItems = obj;
            var addedValues = [];


            addedItems.forEach(function (item, index) {
                // console.log(item, index);
                var rowContent = "";
                addedValues.push("<td style='text-align: center;'></td>");
                for (var key in item) {
                    if (item.hasOwnProperty(key)) {
                        // console.log(key + " -> " + item[key]);
                        if (!hiddenItem.includes(key)) {
                            addedValues.push("<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>");
                        }
                    }
                }
                addedValues.push("<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>");
                addedValues.push("<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>");

                table.row.add(addedValues).draw();
            });
            // location.reload();
        }

        if (action === "update") {
            // alert(id);
            $(".row" + id + "-column").each(function () {
                var propertyName = $(this).attr("property");
                console.log(propertyName);

                for (var key in obj) {
                    if (key === propertyName && obj.hasOwnProperty(key)) {
                        this.innerText = obj[key];
                    }
                }

            });
        }

        //Update columns with foreign key
        // var NO_FKFKUpdateSelector = 'tr';
        // if( !(typeof(id) === 'undefined')) {
        //     NO_FKFKUpdateSelector = '#row'+id;
        // }
        // $('#tableData tbody '+NO_FKFKUpdateSelector+' td[property=NO_FKID]').each(function(){
        //     // debugger;
        //     var postTopicID = parseInt($(this).attr('class').replace('row','').replace('-column',''));
        //     var postTopicObj = getItemByID(postTopicID);
        //     var NO_FKID = parseInt(postTopicObj.NO_FKID);
        //     var NO_FKObj = NO_FKData.find(item => parseInt(item.id) === NO_FKID);
        //     $(this).text(NO_FKObj.name);
        //     // console.log('FK updated for Staff '+postTopicID);
        // });

        if (action === "delete") {
            return;
        }

        var postFKUpdateSelector = 'tr';
        if (!(typeof (id) === 'undefined')) {
            // debugger;
            postFKUpdateSelector = '#row' + id;

            var postID = 0;
            if (action === "update") {
                postID = parseInt(obj.postID);
            }
            if (action === "add") {
                postID = parseInt(obj[0].postId);
            }

            var postObj = postData.find(item => parseInt(item.id) === postID);
            $('#tableData tbody ' + postFKUpdateSelector + ' td[property=postId]').text(postObj.name);
        }
        else {
            $('#tableData tbody ' + postFKUpdateSelector + ' td[property=postId]').each(function () {
                // debugger;
                var postTopicID = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
                var postTopicObj = getItemByID(postTopicID);
                var postID = parseInt(postTopicObj.postId);
                var postObj = postData.find(item => parseInt(item.id) === postID);
                if (postObj !== undefined) {
                    table.cell( this ).data(postObj.name);
                }
                // console.log('FK updated for Staff '+postTopicID);
            });
        }
        var topicFKUpdateSelector = 'tr';
        if (!(typeof (id) === 'undefined')) {
            // debugger;
            topicFKUpdateSelector = '#row' + id;

            var topicID = 0;
            if (action === "update") {
                topicID = parseInt(obj.topicID);
            }
            if (action === "add") {
                topicID = parseInt(obj[0].topicId);
            }

            var topicObj = topicData.find(item => parseInt(item.id) === topicID);
            $('#tableData tbody ' + topicFKUpdateSelector + ' td[property=topicId]').text(topicObj.name);
        }
        else {
            $('#tableData tbody ' + topicFKUpdateSelector + ' td[property=topicId]').each(function () {
                // debugger;
                var postTopicID = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
                var postTopicObj = getItemByID(postTopicID);
                var topicID = parseInt(postTopicObj.topicId);
                var topicObj = topicData.find(item => parseInt(item.id) === topicID);
                table.cell( this ).data(topicObj.name);
                // console.log('FK updated for Staff '+postTopicID);
            });
        }

        formatNumber();
    }


    function getItemByID(id) {
        const result = dataSource.find(item => parseInt(item.id) === id);
        return result;
    }

    function camelToSentenceCase(input) {
        var text = input;
        var result = text.replace(/([A-Z])/g, " $1");
        var finalResult = result.charAt(0).toUpperCase() + result.slice(1);
        return finalResult;
    }

    function datetimeFormat(datetime) {
        return moment(datetime).format("YYYY-MM-DD HH:mm:ss");
    }



</script>