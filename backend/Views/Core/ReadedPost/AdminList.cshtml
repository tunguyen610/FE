@{
    ViewData["Title"] = "Bài viết đã lưu";
    Layout = "_NovaticAdmin";
}


<div class="page-header card">
    <div class="col">
        <div class="page-header-title">
            <i class="fa fa-server"></i>
            <div class="d-inline">
                <h3 class="tableTitle">Bài viết đã đọc</h3>
            </div>
        </div>

        <a href="#" id="btnAddItem" onclick="editItem(0);" class="btn btn-brand btn-elevate btn-icon-sm">
            <i class="fa fa-plus"></i>
            <span class='hideOnMobile'>New Record</span>
        </a>
    </div>
</div>

<div class="pcoded-inner-content">
    <div class="main-body">
        <div class="page-wrapper">

            <!-- Page-body start -->
            <div class="page-body">
                <div class="card">
                    <div class="card-block novaticContainer">
                        <div class="dt-responsive table-responsive">

                            <table id="tableData" class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Index</th>
                                        <th>ID</th>
                                        <th>ID bài viết</th>
                                        <th>Account ID</th>
                                        <th>Nội dung</th>
                                        <th>Mô tả</th>
                                        <th>Ngày tạo</th>

                                        <th>Detail</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th>Index</th>
                                        <th>ID</th>
                                        <th>ID bài viết</th>
                                        <th>Account ID</th>
                                        <th>Nội dung</th>
                                        <th>Mô tả</th>
                                        <th>Ngày tạo</th>

                                        <th> </th>
                                        <th> </th>
                                    </tr>
                                </tfoot>
                            </table>

                            <div class="modal fade" id="modal-id">
                                <div class="modal-dialog modal-lg">
                                    <div class="modal-content">
                                        <div class="modal-header bg-gradient-info">
                                            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                                                &times;
                                            </button>
                                            <h4 class="modal-title"><i class="fa fa-edit"></i> Detail item</h4>
                                        </div>
                                        <div class="modal-body">


                                            <form action="" method="POST"
                                                  onsubmit='updateItem(updatingItemID); return false;' role="form">

                                                <!-- <div class="form-group">
                                                                    <label for="">Apply type ID</label>
                                                                    <input type="text" class="form-control"
                                                                        id="ReadedPostId" required readonly
                                                                        placeholder="">
                                                                </div>


                                                                <div class='form-group'>
                                                                    <label for=''>Apply type name</label>
                                                                    <input type='text' class='form-control'
                                                                        id='ReadedPostName' required
                                                                        placeholder=''>
                                                                </div>


                                                                <div class='form-group'>
                                                                    <label for=''>Description</label>
                                                                    <input type='text' class='form-control'
                                                                        id='ReadedPostDescription'
                                                                        placeholder=''>
                                                                </div>


                                                                <div class='form-group'>
                                                                    <label for=''>CreatedTime</label>
                                                                    <input type='text'
                                                                        class='form-control datetimepicker'
                                                                        id='ReadedPostCreatedTime'
                                                                        placeholder=''>
                                                                </div>


                                                                <div class='form-group' style="">
                                                                    <label for=''>Active</label>
                                                                    <input type='text' class='form-control'
                                                                        id='ReadedPostActive' readonly
                                                                        placeholder=''>
                                                                </div>
                                                                -->
                                                <div class="form-group">
                                                    <label for="">ID</label><span class='required'>*</span>
                                                    <input type="number" class="form-control input-id" value="0"
                                                           id="ReadedPostId" required readonly placeholder="">
                                                </div>
                                                <div class='form-group row selectContainer'>
                                                    <label class=''>ID bài viết</label><span class='required'>*</span>
                                                    <div class='col-sm-12'>
                                                        <select name='select' required id='ReadedPostPostID'
                                                                class='form-control fill dataSelect  input-postID'
                                                                style=' border: 1px solid #e9ecef; '>
                                                        </select>
                                                    </div>
                                                </div>
                                                <script>
                                                    var postData = [];
                                                    function loadDataSelectPost() {
                                                        $.ajax({
                                                            url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}post/api/ListPagingPost?pageSize=10&pageIndex=1",
                                                            type: 'GET',
                                                            async: 'true',
                                                            contentType: 'application/json',
                                                            success: function (responseData) {
                                                                console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded post');
                                                                // debugger;
                                                                var data = responseData.data;
                                                                postData = data;
                                                                data.forEach(function (item, index) {
                                                                    var data = {
                                                                        id: item.id,
                                                                        text: item.name
                                                                    };
                                                                    var newOption = new Option(data.text, data.id, false, false);
                                                                    $('#ReadedPostPostID').append(newOption).trigger('change');
                                                                });
                                                            },
                                                            error: function (e) {
                                                                //console.log(e.message);
                                                            }
                                                        });
                                                    }
                                                    $(document).ready(function () {
                                                        loadDataSelectPost();
                                                    });
                                                </script>
                                                <div class='form-group row selectContainer'>
                                                    <label class=''>Account ID</label><span class='required'>*</span>
                                                    <div class='col-sm-12'>
                                                        <select name='select' required id='ReadedPostAccountID'
                                                                class='form-control fill dataSelect  input-accountID'
                                                                style=' border: 1px solid #e9ecef; '>
                                                        </select>
                                                    </div>
                                                </div>
                                                <script>
                                                    var accountData = [];
                                                    function loadDataSelectAccount() {
                                                        $.ajax({
                                                            url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}account/api/list",
                                                            type: 'GET',
                                                            async: 'true',
                                                            contentType: 'application/json',
                                                            success: function (responseData) {
                                                                console.log(new Date().getSeconds() + ':' + new Date().getMilliseconds() + ' - loaded account');
                                                                // debugger;
                                                                var data = responseData.data;
                                                                accountData = data;
                                                                data.forEach(function (item, index) {
                                                                    var data = {
                                                                        id: item.id,
                                                                        text: item.name
                                                                    };
                                                                    var newOption = new Option(data.text, data.id, false, false);
                                                                    $('#ReadedPostAccountID').append(newOption).trigger('change');
                                                                });
                                                            },
                                                            error: function (e) {
                                                                //console.log(e.message);
                                                            }
                                                        });
                                                    }
                                                    $(document).ready(function () {
                                                        loadDataSelectAccount();
                                                    });
                                                </script>
                                                <div class="form-group" style="display:none ">
                                                    <label for="">Active</label><span class='required'>*</span>
                                                    <input type="number" class="form-control input-active" value="0"
                                                           id="ReadedPostActive" required placeholder="">
                                                </div>
                                                <div class="form-group">
                                                    <label for="">Nội dung</label><span class='required'>*</span>
                                                    <textarea class="form-control  input-name " rows="2"
                                                              id="ReadedPostName" required></textarea>
                                                </div>
                                                <div class="form-group">
                                                    <label for="">Mô tả</label>
                                                    <textarea class="form-control  input-description " rows="2"
                                                              id="ReadedPostDescription"></textarea>
                                                </div>
                                                <div class='form-group'>
                                                    <label for=''>Ngày tạo </label><span class='required'>*</span>
                                                    <div class='input-group date datetimepicker  input-createdTime'
                                                         id='ReadedPostCreatedTimeDiv'>
                                                        <input type='text' id="ReadedPostCreatedTime" required
                                                               class="form-control" required />
                                                        <span class="input-group-addon">
                                                            <span class="glyphicon glyphicon-calendar"></span>
                                                        </span>
                                                    </div>
                                                </div>




                                                <input style="display:none" id="hiddenSubmit" type="submit"
                                                       class="btn btn-default" value="Save changes">
                                            </form>


                                        </div>
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-default" data-dismiss="modal">
                                                Close
                                            </button>
                                            <button type="button" class="btn btn-primary" id="btnUpdateItem"
                                                    onclick="document.getElementById('hiddenSubmit').click();">
                                                Save
                                                changes
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


<script>
    var hiddenItem = ["active","account","post"];
    var dataSource = [];
    var updatingItemID = 0;
    var tableUpdating = 0;
    var table;

    $(document).ready(function () {
        // Load data
        //loadData();

        setTimeout(function () { loadData(); }, 500);
        // includeLibrary();

        // Datetime picker
        $('.datetimepicker').datetimepicker({
            format: 'DD-MM-YYYY HH:mm:ss'
        });

        $('.dataSelect').select2();

        $(".datetimepicker").on('dp.change', function (e) {
            // console.log(this.value);
            this.value = moment(this.value).format("DD-MM-YYYY HH:mm:ss");
            // console.log(this.value);
        })

    });


    function loadData() {
        $.ajax({
            url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}ReadedPost/api/list",
            type: "GET",
            contentType: "application/json",
            success: function (responseData) {
                // debugger;
                var data = responseData.data;
                dataSource = data;




                data.forEach(function (item, index) {
                    // console.log(item, index);
                    var rowContent = "";
                    rowContent += "<td style='text-align: center;'>" + (index + 1) + "</td>";
                    for (var key in item) {
                        if (item.hasOwnProperty(key)) {
                            // console.log(key + " -> " + item[key]);
                            if (!hiddenItem.includes(key)) {
                                rowContent += "<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>";
                            }
                        }
                    }
                    rowContent += "<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>";
                    rowContent += "<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>";

                    var newRow = "<tr id='row" + item.id + "' >" + rowContent + "</tr>";
                    $(newRow).appendTo($("#tableData tbody"));

                    // $("#tableData #dummyRow").after("<tr id='row"+item.id+"' >" + rowContent + "</tr>");
                });

                //Init datatable
                if (tableUpdating === 0) {
                    initTable();
                }

                //update data with foreign key
                updateTable();
            },
            error: function (e) {
                //console.log(e.message);
                initTable();
            }
        });
    }

    function initTable() {
        table = $('#tableData').DataTable({
            aLengthMenu: [
                [10, 25, 50, 100, 200, -1],
                [10, 25, 50, 100, 200, 'Tất cả']
            ],
            'order': [
                [1, 'desc']
            ]
        });



        table.on('order.dt search.dt', function () {
            table.column(0, {
                search: 'applied',
                order: 'applied'
            }).nodes().each(function (cell, i) {
                cell.innerHTML = i + 1;
            });
        }).draw();

        $('#tableData tfoot th:not(:last-child):not(:nth-last-child(2))').each(function () {
            var title = $(this).text();
            $(this).html("<input type='text' class='tableFooterFilter' placeholder=' ' />");
        });

        table.columns().every(function () {
            var that = this;

            $('input', this.footer()).on('keyup change', function () {
                if (that.search() !== this.value) {
                    that
                        .search(this.value)
                        .draw();
                }
            });
        });
    }

    function editItem(id) {
        updatingItemID = id;
        $("#modal-id").modal('show');

        let obj = getItemByID(id);
        $("#ReadedPostId").val(id > 0 ? obj.id : "");
        $("#ReadedPostPostID").val(id > 0 ? obj.postID : "");
        $("#ReadedPostAccountID").val(id > 0 ? obj.accountID : "");
        $("#ReadedPostActive").val(id > 0 ? obj.active : "");
        $("#ReadedPostName").val(id > 0 ? obj.name : "");
        $("#ReadedPostDescription").val(id > 0 ? obj.description : "");
        $("#ReadedPostCreatedTime").val(id > 0 ? obj.createdTime : "");
        $('#ReadedPostPostID').trigger('change');
        $('#ReadedPostAccountID').trigger('change');

        // $("#ReadedPostId").val(id > 0 ? obj.id : "");
        // $("#ReadedPostName").val(id > 0 ? obj.name : "");
        // $("#ReadedPostDescription").val(id > 0 ? obj.description : "");
        // $("#ReadedPostCreatedTime").val(id > 0 ? obj.createdTime : "");
        // $("#ReadedPostActive").val(id > 0 ? obj.active : "");

        if (id == 0) {
            $("#ReadedPostActive").val(1);
            $("#ReadedPostCreatedTime").val(new Date());
        }
        else {
            // correcting data
            //$('#buyProvinceID').val(obj.provinceID.split(", ")).trigger('change');

        }
        formatNumber();
    }


    function updateItem(id) {
        var actionName = (id == 0 ? "Create" : "Update");
        let obj = getItemByID(id);
        let objName = id > 0 ? obj.name : " ";

        validateInputNumber();

        // "id": $("#ReadedPostId").val(),
        // "name": $("#ReadedPostName").val(),
        // "description": $("#ReadedPostDescription").val(),
        // "createdTime": $("#ReadedPostCreatedTime").val(),
        // "active": $("#ReadedPostActive").val()
        var updatingObj = {
            "id": $("#ReadedPostId").val(),
            "postID": $("#ReadedPostPostID").val(),
            "accountID": $("#ReadedPostAccountID").val(),
            "active": $("#ReadedPostActive").val(),
            "name": $("#ReadedPostName").val(),
            "description": $("#ReadedPostDescription").val(),
            "createdTime": datetimeFormat($("#ReadedPostCreatedTime").val()),

        };

        // correcting data
        //updatingObj.provinceID = updatingObj.provinceID.join(", ");


        Swal.fire({
            title: 'Are you sure?',
            text: "Performing " + actionName + " item " + objName,
            type: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#443',
            confirmButtonText: 'Yes, confirm!'
        }).then((result) => {
            if (result.value) {
                $("#modal-id").modal('hide');

                //CALL AJAX TO UPDATE
                if (id > 0) {
                    $.ajax({
                        url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}ReadedPost/api/update",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(updatingObj),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status == 200 && responseData.message === "SUCCESS") {
                                Swal.fire(
                                    'Updated!',
                                    'Item ' + objName + ' has been successfully updated!',
                                    'success'
                                );
                                updateTable(id, updatingObj, "update");
                                var updatedItemIndex = dataSource.findIndex(item => parseInt(item.id) === id);
                                dataSource[updatedItemIndex] = updatingObj;
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Could\' update item, please check your data',
                                'error'
                            );
                        }
                    });
                };

                //CALL AJAX TO CREATE
                if (id == 0) {
                    updatingObj.id = 1;
                    delete updatingObj["id"]
                    updatingObj.active = 1;
                    updatingObj.createdTime = new Date();
                    console.log(updatingObj);
                    $.ajax({
                        url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}ReadedPost/api/add",
                        type: "POST",
                        contentType: "application/json",
                        data: JSON.stringify(updatingObj),
                        success: function (responseData) {
                            // debugger;
                            if (responseData.status == 201 && responseData.message === "CREATED") {
                                Swal.fire(
                                    'Created!',
                                    'New item has been successfully created!',
                                    'success'
                                );
                                updatingObj = responseData.data;
                                dataSource.push(updatingObj);
                                updateTable(0, updatingObj, "add");
                            }
                        },
                        error: function (e) {
                            //console.log(e.message);
                            Swal.fire(
                                'Error!',
                                'Could\' create item, please check your data',
                                'error'
                            );
                        }
                    });
                }
            }
        })
    }

    function deleteItem(id) {
        let obj = getItemByID(id);
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            type: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.value) {

                //CALL AJAX TO DELETE
                $.ajax({
                    url: "@{@ViewBag.SystemConfigs["HOMEPAGE_URL"].Description}ReadedPost/api/delete",
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ "id": id }),
                    success: function (responseData) {
                        // debugger;
                        if (responseData.status == 200 && responseData.message === "SUCCESS") {
                            Swal.fire(
                                'Deleted!',
                                'Item ' + obj.name + ' has been deleted.',
                                'success'
                            );
                            updateTable(id, 0, "delete");
                        }
                    },
                    error: function (e) {
                        //console.log(e.message);
                        Swal.fire(
                            'Error!',
                            'Item ' + obj.name + ' can\'t be deleted.',
                            'error'
                        );
                    }
                });

            }
        })
    }

    function updateTable(id, obj, action) {
        if (action === "delete") {
            table.row("#row" + id).remove().draw();
        }

        if (action === "add") {
            console.log("Added:" + obj);

            //var addedItems = [obj];
            var addedItems = obj;
            var addedValues = [];


            addedItems.forEach(function (item, index) {
                // console.log(item, index);
                var rowContent = "";
                addedValues.push("<td style='text-align: center;'></td>");
                for (var key in item) {
                    if (item.hasOwnProperty(key)) {
                        // console.log(key + " -> " + item[key]);
                        if (!hiddenItem.includes(key)) {
                            addedValues.push("<td class='row" + item.id + "-column column-" + key + "' property='" + key + "'>" + item[key] + "</td>");
                        }
                    }
                }
                addedValues.push("<td style='text-align: center;'><a onclick='editItem(" + item.id + ")'><i class='fa fa-edit fa-2x' style='color:#03a9f4'></i></a></td>");
                addedValues.push("<td style='text-align: center;'><a onclick='deleteItem(" + item.id + ")'><i class='fa fa-trash fa-2x' style='color:#e91e63'></i></a></td>");

                table.row.add(addedValues).draw();
            });
            // location.reload();
        }

        if (action === "update") {
            // alert(id);
            $(".row" + id + "-column").each(function () {
                var propertyName = $(this).attr("property");
                console.log(propertyName);

                for (var key in obj) {
                    if (key === propertyName && obj.hasOwnProperty(key)) {
                        this.innerText = obj[key];
                    }
                }

            });
        }

        //Update columns with foreign key
        // var NO_FKFKUpdateSelector = 'tr';
        // if( !(typeof(id) === 'undefined')) {
        //     NO_FKFKUpdateSelector = '#row'+id;
        // }
        // $('#tableData tbody '+NO_FKFKUpdateSelector+' td[property=NO_FKID]').each(function(){
        //     // debugger;
        //     var ReadedPostID = parseInt($(this).attr('class').replace('row','').replace('-column',''));
        //     var ReadedPostObj = getItemByID(ReadedPostID);
        //     var NO_FKID = parseInt(ReadedPostObj.NO_FKID);
        //     var NO_FKObj = NO_FKData.find(item => parseInt(item.id) === NO_FKID);
        //     $(this).text(NO_FKObj.name);
        //     // console.log('FK updated for Staff '+ReadedPostID);
        // });

        var postFKUpdateSelector = 'tr';
        if (!(typeof (id) === 'undefined')) {
            // debugger;
            postFKUpdateSelector = '#row' + id;
            var postID = parseInt(obj.postID);
            var postObj = postData.find(item => parseInt(item.id) === postID);
            $('#tableData tbody ' + postFKUpdateSelector + ' td[property=postID]').text(postObj.name);
        }
        else {
            $('#tableData tbody ' + postFKUpdateSelector + ' td[property=postID]').each(function () {
                // debugger;
                var ReadedPostID = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
                var ReadedPostObj = getItemByID(ReadedPostID);
                var postID = parseInt(ReadedPostObj.postID);
                var postObj = postData.find(item => parseInt(item.id) === postID);
                $(this).text(postObj.name);
                // console.log('FK updated for Staff '+ReadedPostID);
            });
        }
        var accountFKUpdateSelector = 'tr';
        if (!(typeof (id) === 'undefined')) {
            // debugger;
            accountFKUpdateSelector = '#row' + id;
            var accountID = parseInt(obj.accountID);
            var accountObj = accountData.find(item => parseInt(item.id) === accountID);
            $('#tableData tbody ' + accountFKUpdateSelector + ' td[property=accountID]').text(accountObj.name);
        }
        else {
            $('#tableData tbody ' + accountFKUpdateSelector + ' td[property=accountID]').each(function () {
                // debugger;
                var ReadedPostID = parseInt($(this).attr('class').replace('row', '').replace('-column', ''));
                var ReadedPostObj = getItemByID(ReadedPostID);
                var accountID = parseInt(ReadedPostObj.accountID);
                var accountObj = accountData.find(item => parseInt(item.id) === accountID);
                $(this).text(accountObj.name);
                // console.log('FK updated for Staff '+ReadedPostID);
            });
        }

        formatNumber();
    }


    function getItemByID(id) {
        const result = dataSource.find(item => parseInt(item.id) === id);
        return result;
    }

    function camelToSentenceCase(input) {
        var text = input;
        var result = text.replace(/([A-Z])/g, " $1");
        var finalResult = result.charAt(0).toUpperCase() + result.slice(1);
        return finalResult;
    }
</script>